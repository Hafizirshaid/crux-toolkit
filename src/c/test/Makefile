# Makefile.in generated by automake 1.9.6 from Makefile.am.
# src/c/test/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



#####################################################################
# AUTHOR: Barbara Frewen, Charles E. Grant
# CREATE DATE: 2008
# PROJECT: crux
# COPYRIGHT: 2008, UW
#####################################################################

# This Makefile builds the scripts used to test the crux components.

# BF: no subdirs so far
#SUBDIRS = clustalw2fasta draw-mhmm input mhmm mhmms scaffold
srcdir = .
top_srcdir = ../../..

pkgdatadir = $(datadir)/crux
pkglibdir = $(libdir)/crux
pkgincludedir = $(includedir)/crux
top_builddir = ../../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = x86_64-unknown-linux-gnu
host_triplet = x86_64-unknown-linux-gnu
check_PROGRAMS = unittests$(EXEEXT)
subdir = src/c/test
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
am_unittests_OBJECTS = utils.$(OBJEXT) peak.$(OBJEXT) \
	spectrum.$(OBJEXT) peptide.$(OBJEXT) protein.$(OBJEXT) \
	peptide_src.$(OBJEXT) mass.$(OBJEXT) alphabet.$(OBJEXT) \
	array.$(OBJEXT) crux-utils.$(OBJEXT) database.$(OBJEXT) \
	carp.$(OBJEXT) peptide_constraint.$(OBJEXT) index.$(OBJEXT) \
	sorter.$(OBJEXT) spectrum_collection.$(OBJEXT) \
	protein_index.$(OBJEXT) ion.$(OBJEXT) ion_series.$(OBJEXT) \
	parameter.$(OBJEXT) scorer.$(OBJEXT) parse_arguments.$(OBJEXT) \
	generate_peptides_iterator.$(OBJEXT) match.$(OBJEXT) \
	match_collection.$(OBJEXT) hash.$(OBJEXT)
unittests_OBJECTS = $(am_unittests_OBJECTS)
unittests_DEPENDENCIES =
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(unittests_SOURCES)
DIST_SOURCES = $(unittests_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/frewen/research/crux/config/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/frewen/research/crux/config/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /home/frewen/research/crux/config/missing --run autoconf
AUTOHEADER = ${SHELL} /home/frewen/research/crux/config/missing --run autoheader
AUTOMAKE = ${SHELL} /home/frewen/research/crux/config/missing --run automake-1.9
AWK = mawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = 
FFLAGS = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lm 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MACHID = linux
MAKEINFO = ${SHELL} /home/frewen/research/crux/config/missing --run makeinfo
OBJEXT = o
PACKAGE = crux
PACKAGE_BUGREPORT = aklammer@u.washington.edu
PACKAGE_NAME = crux
PACKAGE_STRING = crux 1.0
PACKAGE_TARNAME = crux
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
PERCOLATOR_DIR = /home/frewen/research/percolator
PERCOLATOR_FALSE = #
PERCOLATOR_TRUE = 
POW_LIB = 
PYTHON = /usr/bin/python
RANLIB = ranlib
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 1.0.0
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = 
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = x86_64-unknown-linux-gnu
build_alias = 
build_cpu = x86_64
build_os = linux-gnu
build_vendor = unknown
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = x86_64-unknown-linux-gnu
host_alias = 
host_cpu = x86_64
host_os = linux-gnu
host_vendor = unknown
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/frewen/research/crux/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 
unittests_SOURCES = \
        ../utils.c \
        ../peak.c \
        ../spectrum.c \
        ../peptide.c \
        ../protein.c \
        ../peptide_src.c \
        ../mass.c \
        ../alphabet.c \
        ../array.c \
        ../crux-utils.c \
        ../database.c \
        ../carp.c \
        ../peptide_constraint.c \
         ../index.c \
        ../sorter.c \
        ../spectrum_collection.c \
        ../protein_index.c \
        ../ion.c \
        ../ion_series.c \
        ../parameter.c \
        ../scorer.c \
        ../parse_arguments.c \
        ../generate_peptides_iterator.c \
        ../match.c \
        ../match_collection.c \
        ../hash.c


#test_evo_models_LDADD = ../src/libmhmm.a -lm
# BF: there used to be ../lib/libcrux.a, now all libs are *.la
#     can we use one instead of all the *c files?
unittests_LDADD = -lcheck -lm 

# Set up the Meta-MEME testing script.
TESTS = unittests
# none of these?
#check_SCRIPTS = metatest
TESTS_ENVIRONMENT = testdir=$(top_srcdir)/src/c/test

# Update the testing script with the local path to Perl.
#metatest: metatest.pl
#	sed -e 's#!/usr/bin/perl#!$(PERL_SHEBANG)#' $(srcdir)/metatest.pl > metatest
#	chmod ugo+x metatest

# These files should be removed as part of the 'make clean' target.
CLEANFILES = $(check_PROGRAMS) $(check_SCRIPTS)
all: all-am

.SUFFIXES:
.SUFFIXES: .c .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/c/test/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/c/test/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-checkPROGRAMS:
	@list='$(check_PROGRAMS)'; for p in $$list; do \
	  f=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  echo " rm -f $$p $$f"; \
	  rm -f $$p $$f ; \
	done
unittests$(EXEEXT): $(unittests_OBJECTS) $(unittests_DEPENDENCIES) 
	@rm -f unittests$(EXEEXT)
	$(LINK) $(unittests_LDFLAGS) $(unittests_OBJECTS) $(unittests_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/alphabet.Po
include ./$(DEPDIR)/array.Po
include ./$(DEPDIR)/carp.Po
include ./$(DEPDIR)/crux-utils.Po
include ./$(DEPDIR)/database.Po
include ./$(DEPDIR)/generate_peptides_iterator.Po
include ./$(DEPDIR)/hash.Po
include ./$(DEPDIR)/index.Po
include ./$(DEPDIR)/ion.Po
include ./$(DEPDIR)/ion_series.Po
include ./$(DEPDIR)/mass.Po
include ./$(DEPDIR)/match.Po
include ./$(DEPDIR)/match_collection.Po
include ./$(DEPDIR)/parameter.Po
include ./$(DEPDIR)/parse_arguments.Po
include ./$(DEPDIR)/peak.Po
include ./$(DEPDIR)/peptide.Po
include ./$(DEPDIR)/peptide_constraint.Po
include ./$(DEPDIR)/peptide_src.Po
include ./$(DEPDIR)/protein.Po
include ./$(DEPDIR)/protein_index.Po
include ./$(DEPDIR)/scorer.Po
include ./$(DEPDIR)/sorter.Po
include ./$(DEPDIR)/spectrum.Po
include ./$(DEPDIR)/spectrum_collection.Po
include ./$(DEPDIR)/utils.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

utils.o: ../utils.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT utils.o -MD -MP -MF "$(DEPDIR)/utils.Tpo" -c -o utils.o `test -f '../utils.c' || echo '$(srcdir)/'`../utils.c; \
	then mv -f "$(DEPDIR)/utils.Tpo" "$(DEPDIR)/utils.Po"; else rm -f "$(DEPDIR)/utils.Tpo"; exit 1; fi
#	source='../utils.c' object='utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o utils.o `test -f '../utils.c' || echo '$(srcdir)/'`../utils.c

utils.obj: ../utils.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT utils.obj -MD -MP -MF "$(DEPDIR)/utils.Tpo" -c -o utils.obj `if test -f '../utils.c'; then $(CYGPATH_W) '../utils.c'; else $(CYGPATH_W) '$(srcdir)/../utils.c'; fi`; \
	then mv -f "$(DEPDIR)/utils.Tpo" "$(DEPDIR)/utils.Po"; else rm -f "$(DEPDIR)/utils.Tpo"; exit 1; fi
#	source='../utils.c' object='utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o utils.obj `if test -f '../utils.c'; then $(CYGPATH_W) '../utils.c'; else $(CYGPATH_W) '$(srcdir)/../utils.c'; fi`

peak.o: ../peak.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT peak.o -MD -MP -MF "$(DEPDIR)/peak.Tpo" -c -o peak.o `test -f '../peak.c' || echo '$(srcdir)/'`../peak.c; \
	then mv -f "$(DEPDIR)/peak.Tpo" "$(DEPDIR)/peak.Po"; else rm -f "$(DEPDIR)/peak.Tpo"; exit 1; fi
#	source='../peak.c' object='peak.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o peak.o `test -f '../peak.c' || echo '$(srcdir)/'`../peak.c

peak.obj: ../peak.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT peak.obj -MD -MP -MF "$(DEPDIR)/peak.Tpo" -c -o peak.obj `if test -f '../peak.c'; then $(CYGPATH_W) '../peak.c'; else $(CYGPATH_W) '$(srcdir)/../peak.c'; fi`; \
	then mv -f "$(DEPDIR)/peak.Tpo" "$(DEPDIR)/peak.Po"; else rm -f "$(DEPDIR)/peak.Tpo"; exit 1; fi
#	source='../peak.c' object='peak.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o peak.obj `if test -f '../peak.c'; then $(CYGPATH_W) '../peak.c'; else $(CYGPATH_W) '$(srcdir)/../peak.c'; fi`

spectrum.o: ../spectrum.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spectrum.o -MD -MP -MF "$(DEPDIR)/spectrum.Tpo" -c -o spectrum.o `test -f '../spectrum.c' || echo '$(srcdir)/'`../spectrum.c; \
	then mv -f "$(DEPDIR)/spectrum.Tpo" "$(DEPDIR)/spectrum.Po"; else rm -f "$(DEPDIR)/spectrum.Tpo"; exit 1; fi
#	source='../spectrum.c' object='spectrum.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spectrum.o `test -f '../spectrum.c' || echo '$(srcdir)/'`../spectrum.c

spectrum.obj: ../spectrum.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spectrum.obj -MD -MP -MF "$(DEPDIR)/spectrum.Tpo" -c -o spectrum.obj `if test -f '../spectrum.c'; then $(CYGPATH_W) '../spectrum.c'; else $(CYGPATH_W) '$(srcdir)/../spectrum.c'; fi`; \
	then mv -f "$(DEPDIR)/spectrum.Tpo" "$(DEPDIR)/spectrum.Po"; else rm -f "$(DEPDIR)/spectrum.Tpo"; exit 1; fi
#	source='../spectrum.c' object='spectrum.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spectrum.obj `if test -f '../spectrum.c'; then $(CYGPATH_W) '../spectrum.c'; else $(CYGPATH_W) '$(srcdir)/../spectrum.c'; fi`

peptide.o: ../peptide.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT peptide.o -MD -MP -MF "$(DEPDIR)/peptide.Tpo" -c -o peptide.o `test -f '../peptide.c' || echo '$(srcdir)/'`../peptide.c; \
	then mv -f "$(DEPDIR)/peptide.Tpo" "$(DEPDIR)/peptide.Po"; else rm -f "$(DEPDIR)/peptide.Tpo"; exit 1; fi
#	source='../peptide.c' object='peptide.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o peptide.o `test -f '../peptide.c' || echo '$(srcdir)/'`../peptide.c

peptide.obj: ../peptide.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT peptide.obj -MD -MP -MF "$(DEPDIR)/peptide.Tpo" -c -o peptide.obj `if test -f '../peptide.c'; then $(CYGPATH_W) '../peptide.c'; else $(CYGPATH_W) '$(srcdir)/../peptide.c'; fi`; \
	then mv -f "$(DEPDIR)/peptide.Tpo" "$(DEPDIR)/peptide.Po"; else rm -f "$(DEPDIR)/peptide.Tpo"; exit 1; fi
#	source='../peptide.c' object='peptide.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o peptide.obj `if test -f '../peptide.c'; then $(CYGPATH_W) '../peptide.c'; else $(CYGPATH_W) '$(srcdir)/../peptide.c'; fi`

protein.o: ../protein.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT protein.o -MD -MP -MF "$(DEPDIR)/protein.Tpo" -c -o protein.o `test -f '../protein.c' || echo '$(srcdir)/'`../protein.c; \
	then mv -f "$(DEPDIR)/protein.Tpo" "$(DEPDIR)/protein.Po"; else rm -f "$(DEPDIR)/protein.Tpo"; exit 1; fi
#	source='../protein.c' object='protein.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o protein.o `test -f '../protein.c' || echo '$(srcdir)/'`../protein.c

protein.obj: ../protein.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT protein.obj -MD -MP -MF "$(DEPDIR)/protein.Tpo" -c -o protein.obj `if test -f '../protein.c'; then $(CYGPATH_W) '../protein.c'; else $(CYGPATH_W) '$(srcdir)/../protein.c'; fi`; \
	then mv -f "$(DEPDIR)/protein.Tpo" "$(DEPDIR)/protein.Po"; else rm -f "$(DEPDIR)/protein.Tpo"; exit 1; fi
#	source='../protein.c' object='protein.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o protein.obj `if test -f '../protein.c'; then $(CYGPATH_W) '../protein.c'; else $(CYGPATH_W) '$(srcdir)/../protein.c'; fi`

peptide_src.o: ../peptide_src.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT peptide_src.o -MD -MP -MF "$(DEPDIR)/peptide_src.Tpo" -c -o peptide_src.o `test -f '../peptide_src.c' || echo '$(srcdir)/'`../peptide_src.c; \
	then mv -f "$(DEPDIR)/peptide_src.Tpo" "$(DEPDIR)/peptide_src.Po"; else rm -f "$(DEPDIR)/peptide_src.Tpo"; exit 1; fi
#	source='../peptide_src.c' object='peptide_src.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o peptide_src.o `test -f '../peptide_src.c' || echo '$(srcdir)/'`../peptide_src.c

peptide_src.obj: ../peptide_src.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT peptide_src.obj -MD -MP -MF "$(DEPDIR)/peptide_src.Tpo" -c -o peptide_src.obj `if test -f '../peptide_src.c'; then $(CYGPATH_W) '../peptide_src.c'; else $(CYGPATH_W) '$(srcdir)/../peptide_src.c'; fi`; \
	then mv -f "$(DEPDIR)/peptide_src.Tpo" "$(DEPDIR)/peptide_src.Po"; else rm -f "$(DEPDIR)/peptide_src.Tpo"; exit 1; fi
#	source='../peptide_src.c' object='peptide_src.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o peptide_src.obj `if test -f '../peptide_src.c'; then $(CYGPATH_W) '../peptide_src.c'; else $(CYGPATH_W) '$(srcdir)/../peptide_src.c'; fi`

mass.o: ../mass.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT mass.o -MD -MP -MF "$(DEPDIR)/mass.Tpo" -c -o mass.o `test -f '../mass.c' || echo '$(srcdir)/'`../mass.c; \
	then mv -f "$(DEPDIR)/mass.Tpo" "$(DEPDIR)/mass.Po"; else rm -f "$(DEPDIR)/mass.Tpo"; exit 1; fi
#	source='../mass.c' object='mass.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o mass.o `test -f '../mass.c' || echo '$(srcdir)/'`../mass.c

mass.obj: ../mass.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT mass.obj -MD -MP -MF "$(DEPDIR)/mass.Tpo" -c -o mass.obj `if test -f '../mass.c'; then $(CYGPATH_W) '../mass.c'; else $(CYGPATH_W) '$(srcdir)/../mass.c'; fi`; \
	then mv -f "$(DEPDIR)/mass.Tpo" "$(DEPDIR)/mass.Po"; else rm -f "$(DEPDIR)/mass.Tpo"; exit 1; fi
#	source='../mass.c' object='mass.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o mass.obj `if test -f '../mass.c'; then $(CYGPATH_W) '../mass.c'; else $(CYGPATH_W) '$(srcdir)/../mass.c'; fi`

alphabet.o: ../alphabet.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT alphabet.o -MD -MP -MF "$(DEPDIR)/alphabet.Tpo" -c -o alphabet.o `test -f '../alphabet.c' || echo '$(srcdir)/'`../alphabet.c; \
	then mv -f "$(DEPDIR)/alphabet.Tpo" "$(DEPDIR)/alphabet.Po"; else rm -f "$(DEPDIR)/alphabet.Tpo"; exit 1; fi
#	source='../alphabet.c' object='alphabet.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o alphabet.o `test -f '../alphabet.c' || echo '$(srcdir)/'`../alphabet.c

alphabet.obj: ../alphabet.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT alphabet.obj -MD -MP -MF "$(DEPDIR)/alphabet.Tpo" -c -o alphabet.obj `if test -f '../alphabet.c'; then $(CYGPATH_W) '../alphabet.c'; else $(CYGPATH_W) '$(srcdir)/../alphabet.c'; fi`; \
	then mv -f "$(DEPDIR)/alphabet.Tpo" "$(DEPDIR)/alphabet.Po"; else rm -f "$(DEPDIR)/alphabet.Tpo"; exit 1; fi
#	source='../alphabet.c' object='alphabet.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o alphabet.obj `if test -f '../alphabet.c'; then $(CYGPATH_W) '../alphabet.c'; else $(CYGPATH_W) '$(srcdir)/../alphabet.c'; fi`

array.o: ../array.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT array.o -MD -MP -MF "$(DEPDIR)/array.Tpo" -c -o array.o `test -f '../array.c' || echo '$(srcdir)/'`../array.c; \
	then mv -f "$(DEPDIR)/array.Tpo" "$(DEPDIR)/array.Po"; else rm -f "$(DEPDIR)/array.Tpo"; exit 1; fi
#	source='../array.c' object='array.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o array.o `test -f '../array.c' || echo '$(srcdir)/'`../array.c

array.obj: ../array.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT array.obj -MD -MP -MF "$(DEPDIR)/array.Tpo" -c -o array.obj `if test -f '../array.c'; then $(CYGPATH_W) '../array.c'; else $(CYGPATH_W) '$(srcdir)/../array.c'; fi`; \
	then mv -f "$(DEPDIR)/array.Tpo" "$(DEPDIR)/array.Po"; else rm -f "$(DEPDIR)/array.Tpo"; exit 1; fi
#	source='../array.c' object='array.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o array.obj `if test -f '../array.c'; then $(CYGPATH_W) '../array.c'; else $(CYGPATH_W) '$(srcdir)/../array.c'; fi`

crux-utils.o: ../crux-utils.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crux-utils.o -MD -MP -MF "$(DEPDIR)/crux-utils.Tpo" -c -o crux-utils.o `test -f '../crux-utils.c' || echo '$(srcdir)/'`../crux-utils.c; \
	then mv -f "$(DEPDIR)/crux-utils.Tpo" "$(DEPDIR)/crux-utils.Po"; else rm -f "$(DEPDIR)/crux-utils.Tpo"; exit 1; fi
#	source='../crux-utils.c' object='crux-utils.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crux-utils.o `test -f '../crux-utils.c' || echo '$(srcdir)/'`../crux-utils.c

crux-utils.obj: ../crux-utils.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT crux-utils.obj -MD -MP -MF "$(DEPDIR)/crux-utils.Tpo" -c -o crux-utils.obj `if test -f '../crux-utils.c'; then $(CYGPATH_W) '../crux-utils.c'; else $(CYGPATH_W) '$(srcdir)/../crux-utils.c'; fi`; \
	then mv -f "$(DEPDIR)/crux-utils.Tpo" "$(DEPDIR)/crux-utils.Po"; else rm -f "$(DEPDIR)/crux-utils.Tpo"; exit 1; fi
#	source='../crux-utils.c' object='crux-utils.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o crux-utils.obj `if test -f '../crux-utils.c'; then $(CYGPATH_W) '../crux-utils.c'; else $(CYGPATH_W) '$(srcdir)/../crux-utils.c'; fi`

database.o: ../database.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT database.o -MD -MP -MF "$(DEPDIR)/database.Tpo" -c -o database.o `test -f '../database.c' || echo '$(srcdir)/'`../database.c; \
	then mv -f "$(DEPDIR)/database.Tpo" "$(DEPDIR)/database.Po"; else rm -f "$(DEPDIR)/database.Tpo"; exit 1; fi
#	source='../database.c' object='database.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o database.o `test -f '../database.c' || echo '$(srcdir)/'`../database.c

database.obj: ../database.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT database.obj -MD -MP -MF "$(DEPDIR)/database.Tpo" -c -o database.obj `if test -f '../database.c'; then $(CYGPATH_W) '../database.c'; else $(CYGPATH_W) '$(srcdir)/../database.c'; fi`; \
	then mv -f "$(DEPDIR)/database.Tpo" "$(DEPDIR)/database.Po"; else rm -f "$(DEPDIR)/database.Tpo"; exit 1; fi
#	source='../database.c' object='database.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o database.obj `if test -f '../database.c'; then $(CYGPATH_W) '../database.c'; else $(CYGPATH_W) '$(srcdir)/../database.c'; fi`

carp.o: ../carp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT carp.o -MD -MP -MF "$(DEPDIR)/carp.Tpo" -c -o carp.o `test -f '../carp.c' || echo '$(srcdir)/'`../carp.c; \
	then mv -f "$(DEPDIR)/carp.Tpo" "$(DEPDIR)/carp.Po"; else rm -f "$(DEPDIR)/carp.Tpo"; exit 1; fi
#	source='../carp.c' object='carp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o carp.o `test -f '../carp.c' || echo '$(srcdir)/'`../carp.c

carp.obj: ../carp.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT carp.obj -MD -MP -MF "$(DEPDIR)/carp.Tpo" -c -o carp.obj `if test -f '../carp.c'; then $(CYGPATH_W) '../carp.c'; else $(CYGPATH_W) '$(srcdir)/../carp.c'; fi`; \
	then mv -f "$(DEPDIR)/carp.Tpo" "$(DEPDIR)/carp.Po"; else rm -f "$(DEPDIR)/carp.Tpo"; exit 1; fi
#	source='../carp.c' object='carp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o carp.obj `if test -f '../carp.c'; then $(CYGPATH_W) '../carp.c'; else $(CYGPATH_W) '$(srcdir)/../carp.c'; fi`

peptide_constraint.o: ../peptide_constraint.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT peptide_constraint.o -MD -MP -MF "$(DEPDIR)/peptide_constraint.Tpo" -c -o peptide_constraint.o `test -f '../peptide_constraint.c' || echo '$(srcdir)/'`../peptide_constraint.c; \
	then mv -f "$(DEPDIR)/peptide_constraint.Tpo" "$(DEPDIR)/peptide_constraint.Po"; else rm -f "$(DEPDIR)/peptide_constraint.Tpo"; exit 1; fi
#	source='../peptide_constraint.c' object='peptide_constraint.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o peptide_constraint.o `test -f '../peptide_constraint.c' || echo '$(srcdir)/'`../peptide_constraint.c

peptide_constraint.obj: ../peptide_constraint.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT peptide_constraint.obj -MD -MP -MF "$(DEPDIR)/peptide_constraint.Tpo" -c -o peptide_constraint.obj `if test -f '../peptide_constraint.c'; then $(CYGPATH_W) '../peptide_constraint.c'; else $(CYGPATH_W) '$(srcdir)/../peptide_constraint.c'; fi`; \
	then mv -f "$(DEPDIR)/peptide_constraint.Tpo" "$(DEPDIR)/peptide_constraint.Po"; else rm -f "$(DEPDIR)/peptide_constraint.Tpo"; exit 1; fi
#	source='../peptide_constraint.c' object='peptide_constraint.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o peptide_constraint.obj `if test -f '../peptide_constraint.c'; then $(CYGPATH_W) '../peptide_constraint.c'; else $(CYGPATH_W) '$(srcdir)/../peptide_constraint.c'; fi`

index.o: ../index.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT index.o -MD -MP -MF "$(DEPDIR)/index.Tpo" -c -o index.o `test -f '../index.c' || echo '$(srcdir)/'`../index.c; \
	then mv -f "$(DEPDIR)/index.Tpo" "$(DEPDIR)/index.Po"; else rm -f "$(DEPDIR)/index.Tpo"; exit 1; fi
#	source='../index.c' object='index.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o index.o `test -f '../index.c' || echo '$(srcdir)/'`../index.c

index.obj: ../index.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT index.obj -MD -MP -MF "$(DEPDIR)/index.Tpo" -c -o index.obj `if test -f '../index.c'; then $(CYGPATH_W) '../index.c'; else $(CYGPATH_W) '$(srcdir)/../index.c'; fi`; \
	then mv -f "$(DEPDIR)/index.Tpo" "$(DEPDIR)/index.Po"; else rm -f "$(DEPDIR)/index.Tpo"; exit 1; fi
#	source='../index.c' object='index.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o index.obj `if test -f '../index.c'; then $(CYGPATH_W) '../index.c'; else $(CYGPATH_W) '$(srcdir)/../index.c'; fi`

sorter.o: ../sorter.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sorter.o -MD -MP -MF "$(DEPDIR)/sorter.Tpo" -c -o sorter.o `test -f '../sorter.c' || echo '$(srcdir)/'`../sorter.c; \
	then mv -f "$(DEPDIR)/sorter.Tpo" "$(DEPDIR)/sorter.Po"; else rm -f "$(DEPDIR)/sorter.Tpo"; exit 1; fi
#	source='../sorter.c' object='sorter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sorter.o `test -f '../sorter.c' || echo '$(srcdir)/'`../sorter.c

sorter.obj: ../sorter.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT sorter.obj -MD -MP -MF "$(DEPDIR)/sorter.Tpo" -c -o sorter.obj `if test -f '../sorter.c'; then $(CYGPATH_W) '../sorter.c'; else $(CYGPATH_W) '$(srcdir)/../sorter.c'; fi`; \
	then mv -f "$(DEPDIR)/sorter.Tpo" "$(DEPDIR)/sorter.Po"; else rm -f "$(DEPDIR)/sorter.Tpo"; exit 1; fi
#	source='../sorter.c' object='sorter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o sorter.obj `if test -f '../sorter.c'; then $(CYGPATH_W) '../sorter.c'; else $(CYGPATH_W) '$(srcdir)/../sorter.c'; fi`

spectrum_collection.o: ../spectrum_collection.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spectrum_collection.o -MD -MP -MF "$(DEPDIR)/spectrum_collection.Tpo" -c -o spectrum_collection.o `test -f '../spectrum_collection.c' || echo '$(srcdir)/'`../spectrum_collection.c; \
	then mv -f "$(DEPDIR)/spectrum_collection.Tpo" "$(DEPDIR)/spectrum_collection.Po"; else rm -f "$(DEPDIR)/spectrum_collection.Tpo"; exit 1; fi
#	source='../spectrum_collection.c' object='spectrum_collection.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spectrum_collection.o `test -f '../spectrum_collection.c' || echo '$(srcdir)/'`../spectrum_collection.c

spectrum_collection.obj: ../spectrum_collection.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT spectrum_collection.obj -MD -MP -MF "$(DEPDIR)/spectrum_collection.Tpo" -c -o spectrum_collection.obj `if test -f '../spectrum_collection.c'; then $(CYGPATH_W) '../spectrum_collection.c'; else $(CYGPATH_W) '$(srcdir)/../spectrum_collection.c'; fi`; \
	then mv -f "$(DEPDIR)/spectrum_collection.Tpo" "$(DEPDIR)/spectrum_collection.Po"; else rm -f "$(DEPDIR)/spectrum_collection.Tpo"; exit 1; fi
#	source='../spectrum_collection.c' object='spectrum_collection.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o spectrum_collection.obj `if test -f '../spectrum_collection.c'; then $(CYGPATH_W) '../spectrum_collection.c'; else $(CYGPATH_W) '$(srcdir)/../spectrum_collection.c'; fi`

protein_index.o: ../protein_index.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT protein_index.o -MD -MP -MF "$(DEPDIR)/protein_index.Tpo" -c -o protein_index.o `test -f '../protein_index.c' || echo '$(srcdir)/'`../protein_index.c; \
	then mv -f "$(DEPDIR)/protein_index.Tpo" "$(DEPDIR)/protein_index.Po"; else rm -f "$(DEPDIR)/protein_index.Tpo"; exit 1; fi
#	source='../protein_index.c' object='protein_index.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o protein_index.o `test -f '../protein_index.c' || echo '$(srcdir)/'`../protein_index.c

protein_index.obj: ../protein_index.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT protein_index.obj -MD -MP -MF "$(DEPDIR)/protein_index.Tpo" -c -o protein_index.obj `if test -f '../protein_index.c'; then $(CYGPATH_W) '../protein_index.c'; else $(CYGPATH_W) '$(srcdir)/../protein_index.c'; fi`; \
	then mv -f "$(DEPDIR)/protein_index.Tpo" "$(DEPDIR)/protein_index.Po"; else rm -f "$(DEPDIR)/protein_index.Tpo"; exit 1; fi
#	source='../protein_index.c' object='protein_index.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o protein_index.obj `if test -f '../protein_index.c'; then $(CYGPATH_W) '../protein_index.c'; else $(CYGPATH_W) '$(srcdir)/../protein_index.c'; fi`

ion.o: ../ion.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ion.o -MD -MP -MF "$(DEPDIR)/ion.Tpo" -c -o ion.o `test -f '../ion.c' || echo '$(srcdir)/'`../ion.c; \
	then mv -f "$(DEPDIR)/ion.Tpo" "$(DEPDIR)/ion.Po"; else rm -f "$(DEPDIR)/ion.Tpo"; exit 1; fi
#	source='../ion.c' object='ion.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ion.o `test -f '../ion.c' || echo '$(srcdir)/'`../ion.c

ion.obj: ../ion.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ion.obj -MD -MP -MF "$(DEPDIR)/ion.Tpo" -c -o ion.obj `if test -f '../ion.c'; then $(CYGPATH_W) '../ion.c'; else $(CYGPATH_W) '$(srcdir)/../ion.c'; fi`; \
	then mv -f "$(DEPDIR)/ion.Tpo" "$(DEPDIR)/ion.Po"; else rm -f "$(DEPDIR)/ion.Tpo"; exit 1; fi
#	source='../ion.c' object='ion.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ion.obj `if test -f '../ion.c'; then $(CYGPATH_W) '../ion.c'; else $(CYGPATH_W) '$(srcdir)/../ion.c'; fi`

ion_series.o: ../ion_series.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ion_series.o -MD -MP -MF "$(DEPDIR)/ion_series.Tpo" -c -o ion_series.o `test -f '../ion_series.c' || echo '$(srcdir)/'`../ion_series.c; \
	then mv -f "$(DEPDIR)/ion_series.Tpo" "$(DEPDIR)/ion_series.Po"; else rm -f "$(DEPDIR)/ion_series.Tpo"; exit 1; fi
#	source='../ion_series.c' object='ion_series.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ion_series.o `test -f '../ion_series.c' || echo '$(srcdir)/'`../ion_series.c

ion_series.obj: ../ion_series.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT ion_series.obj -MD -MP -MF "$(DEPDIR)/ion_series.Tpo" -c -o ion_series.obj `if test -f '../ion_series.c'; then $(CYGPATH_W) '../ion_series.c'; else $(CYGPATH_W) '$(srcdir)/../ion_series.c'; fi`; \
	then mv -f "$(DEPDIR)/ion_series.Tpo" "$(DEPDIR)/ion_series.Po"; else rm -f "$(DEPDIR)/ion_series.Tpo"; exit 1; fi
#	source='../ion_series.c' object='ion_series.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o ion_series.obj `if test -f '../ion_series.c'; then $(CYGPATH_W) '../ion_series.c'; else $(CYGPATH_W) '$(srcdir)/../ion_series.c'; fi`

parameter.o: ../parameter.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parameter.o -MD -MP -MF "$(DEPDIR)/parameter.Tpo" -c -o parameter.o `test -f '../parameter.c' || echo '$(srcdir)/'`../parameter.c; \
	then mv -f "$(DEPDIR)/parameter.Tpo" "$(DEPDIR)/parameter.Po"; else rm -f "$(DEPDIR)/parameter.Tpo"; exit 1; fi
#	source='../parameter.c' object='parameter.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parameter.o `test -f '../parameter.c' || echo '$(srcdir)/'`../parameter.c

parameter.obj: ../parameter.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parameter.obj -MD -MP -MF "$(DEPDIR)/parameter.Tpo" -c -o parameter.obj `if test -f '../parameter.c'; then $(CYGPATH_W) '../parameter.c'; else $(CYGPATH_W) '$(srcdir)/../parameter.c'; fi`; \
	then mv -f "$(DEPDIR)/parameter.Tpo" "$(DEPDIR)/parameter.Po"; else rm -f "$(DEPDIR)/parameter.Tpo"; exit 1; fi
#	source='../parameter.c' object='parameter.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parameter.obj `if test -f '../parameter.c'; then $(CYGPATH_W) '../parameter.c'; else $(CYGPATH_W) '$(srcdir)/../parameter.c'; fi`

scorer.o: ../scorer.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT scorer.o -MD -MP -MF "$(DEPDIR)/scorer.Tpo" -c -o scorer.o `test -f '../scorer.c' || echo '$(srcdir)/'`../scorer.c; \
	then mv -f "$(DEPDIR)/scorer.Tpo" "$(DEPDIR)/scorer.Po"; else rm -f "$(DEPDIR)/scorer.Tpo"; exit 1; fi
#	source='../scorer.c' object='scorer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o scorer.o `test -f '../scorer.c' || echo '$(srcdir)/'`../scorer.c

scorer.obj: ../scorer.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT scorer.obj -MD -MP -MF "$(DEPDIR)/scorer.Tpo" -c -o scorer.obj `if test -f '../scorer.c'; then $(CYGPATH_W) '../scorer.c'; else $(CYGPATH_W) '$(srcdir)/../scorer.c'; fi`; \
	then mv -f "$(DEPDIR)/scorer.Tpo" "$(DEPDIR)/scorer.Po"; else rm -f "$(DEPDIR)/scorer.Tpo"; exit 1; fi
#	source='../scorer.c' object='scorer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o scorer.obj `if test -f '../scorer.c'; then $(CYGPATH_W) '../scorer.c'; else $(CYGPATH_W) '$(srcdir)/../scorer.c'; fi`

parse_arguments.o: ../parse_arguments.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parse_arguments.o -MD -MP -MF "$(DEPDIR)/parse_arguments.Tpo" -c -o parse_arguments.o `test -f '../parse_arguments.c' || echo '$(srcdir)/'`../parse_arguments.c; \
	then mv -f "$(DEPDIR)/parse_arguments.Tpo" "$(DEPDIR)/parse_arguments.Po"; else rm -f "$(DEPDIR)/parse_arguments.Tpo"; exit 1; fi
#	source='../parse_arguments.c' object='parse_arguments.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parse_arguments.o `test -f '../parse_arguments.c' || echo '$(srcdir)/'`../parse_arguments.c

parse_arguments.obj: ../parse_arguments.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT parse_arguments.obj -MD -MP -MF "$(DEPDIR)/parse_arguments.Tpo" -c -o parse_arguments.obj `if test -f '../parse_arguments.c'; then $(CYGPATH_W) '../parse_arguments.c'; else $(CYGPATH_W) '$(srcdir)/../parse_arguments.c'; fi`; \
	then mv -f "$(DEPDIR)/parse_arguments.Tpo" "$(DEPDIR)/parse_arguments.Po"; else rm -f "$(DEPDIR)/parse_arguments.Tpo"; exit 1; fi
#	source='../parse_arguments.c' object='parse_arguments.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o parse_arguments.obj `if test -f '../parse_arguments.c'; then $(CYGPATH_W) '../parse_arguments.c'; else $(CYGPATH_W) '$(srcdir)/../parse_arguments.c'; fi`

generate_peptides_iterator.o: ../generate_peptides_iterator.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT generate_peptides_iterator.o -MD -MP -MF "$(DEPDIR)/generate_peptides_iterator.Tpo" -c -o generate_peptides_iterator.o `test -f '../generate_peptides_iterator.c' || echo '$(srcdir)/'`../generate_peptides_iterator.c; \
	then mv -f "$(DEPDIR)/generate_peptides_iterator.Tpo" "$(DEPDIR)/generate_peptides_iterator.Po"; else rm -f "$(DEPDIR)/generate_peptides_iterator.Tpo"; exit 1; fi
#	source='../generate_peptides_iterator.c' object='generate_peptides_iterator.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o generate_peptides_iterator.o `test -f '../generate_peptides_iterator.c' || echo '$(srcdir)/'`../generate_peptides_iterator.c

generate_peptides_iterator.obj: ../generate_peptides_iterator.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT generate_peptides_iterator.obj -MD -MP -MF "$(DEPDIR)/generate_peptides_iterator.Tpo" -c -o generate_peptides_iterator.obj `if test -f '../generate_peptides_iterator.c'; then $(CYGPATH_W) '../generate_peptides_iterator.c'; else $(CYGPATH_W) '$(srcdir)/../generate_peptides_iterator.c'; fi`; \
	then mv -f "$(DEPDIR)/generate_peptides_iterator.Tpo" "$(DEPDIR)/generate_peptides_iterator.Po"; else rm -f "$(DEPDIR)/generate_peptides_iterator.Tpo"; exit 1; fi
#	source='../generate_peptides_iterator.c' object='generate_peptides_iterator.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o generate_peptides_iterator.obj `if test -f '../generate_peptides_iterator.c'; then $(CYGPATH_W) '../generate_peptides_iterator.c'; else $(CYGPATH_W) '$(srcdir)/../generate_peptides_iterator.c'; fi`

match.o: ../match.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT match.o -MD -MP -MF "$(DEPDIR)/match.Tpo" -c -o match.o `test -f '../match.c' || echo '$(srcdir)/'`../match.c; \
	then mv -f "$(DEPDIR)/match.Tpo" "$(DEPDIR)/match.Po"; else rm -f "$(DEPDIR)/match.Tpo"; exit 1; fi
#	source='../match.c' object='match.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o match.o `test -f '../match.c' || echo '$(srcdir)/'`../match.c

match.obj: ../match.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT match.obj -MD -MP -MF "$(DEPDIR)/match.Tpo" -c -o match.obj `if test -f '../match.c'; then $(CYGPATH_W) '../match.c'; else $(CYGPATH_W) '$(srcdir)/../match.c'; fi`; \
	then mv -f "$(DEPDIR)/match.Tpo" "$(DEPDIR)/match.Po"; else rm -f "$(DEPDIR)/match.Tpo"; exit 1; fi
#	source='../match.c' object='match.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o match.obj `if test -f '../match.c'; then $(CYGPATH_W) '../match.c'; else $(CYGPATH_W) '$(srcdir)/../match.c'; fi`

match_collection.o: ../match_collection.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT match_collection.o -MD -MP -MF "$(DEPDIR)/match_collection.Tpo" -c -o match_collection.o `test -f '../match_collection.c' || echo '$(srcdir)/'`../match_collection.c; \
	then mv -f "$(DEPDIR)/match_collection.Tpo" "$(DEPDIR)/match_collection.Po"; else rm -f "$(DEPDIR)/match_collection.Tpo"; exit 1; fi
#	source='../match_collection.c' object='match_collection.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o match_collection.o `test -f '../match_collection.c' || echo '$(srcdir)/'`../match_collection.c

match_collection.obj: ../match_collection.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT match_collection.obj -MD -MP -MF "$(DEPDIR)/match_collection.Tpo" -c -o match_collection.obj `if test -f '../match_collection.c'; then $(CYGPATH_W) '../match_collection.c'; else $(CYGPATH_W) '$(srcdir)/../match_collection.c'; fi`; \
	then mv -f "$(DEPDIR)/match_collection.Tpo" "$(DEPDIR)/match_collection.Po"; else rm -f "$(DEPDIR)/match_collection.Tpo"; exit 1; fi
#	source='../match_collection.c' object='match_collection.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o match_collection.obj `if test -f '../match_collection.c'; then $(CYGPATH_W) '../match_collection.c'; else $(CYGPATH_W) '$(srcdir)/../match_collection.c'; fi`

hash.o: ../hash.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT hash.o -MD -MP -MF "$(DEPDIR)/hash.Tpo" -c -o hash.o `test -f '../hash.c' || echo '$(srcdir)/'`../hash.c; \
	then mv -f "$(DEPDIR)/hash.Tpo" "$(DEPDIR)/hash.Po"; else rm -f "$(DEPDIR)/hash.Tpo"; exit 1; fi
#	source='../hash.c' object='hash.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o hash.o `test -f '../hash.c' || echo '$(srcdir)/'`../hash.c

hash.obj: ../hash.c
	if $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -MT hash.obj -MD -MP -MF "$(DEPDIR)/hash.Tpo" -c -o hash.obj `if test -f '../hash.c'; then $(CYGPATH_W) '../hash.c'; else $(CYGPATH_W) '$(srcdir)/../hash.c'; fi`; \
	then mv -f "$(DEPDIR)/hash.Tpo" "$(DEPDIR)/hash.Po"; else rm -f "$(DEPDIR)/hash.Tpo"; exit 1; fi
#	source='../hash.c' object='hash.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS) -c -o hash.obj `if test -f '../hash.c'; then $(CYGPATH_W) '../hash.c'; else $(CYGPATH_W) '$(srcdir)/../hash.c'; fi`

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

check-TESTS: $(TESTS)
	@failed=0; all=0; xfail=0; xpass=0; skip=0; \
	srcdir=$(srcdir); export srcdir; \
	list='$(TESTS)'; \
	if test -n "$$list"; then \
	  for tst in $$list; do \
	    if test -f ./$$tst; then dir=./; \
	    elif test -f $$tst; then dir=; \
	    else dir="$(srcdir)/"; fi; \
	    if $(TESTS_ENVIRONMENT) $${dir}$$tst; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xpass=`expr $$xpass + 1`; \
		failed=`expr $$failed + 1`; \
		echo "XPASS: $$tst"; \
	      ;; \
	      *) \
		echo "PASS: $$tst"; \
	      ;; \
	      esac; \
	    elif test $$? -ne 77; then \
	      all=`expr $$all + 1`; \
	      case " $(XFAIL_TESTS) " in \
	      *" $$tst "*) \
		xfail=`expr $$xfail + 1`; \
		echo "XFAIL: $$tst"; \
	      ;; \
	      *) \
		failed=`expr $$failed + 1`; \
		echo "FAIL: $$tst"; \
	      ;; \
	      esac; \
	    else \
	      skip=`expr $$skip + 1`; \
	      echo "SKIP: $$tst"; \
	    fi; \
	  done; \
	  if test "$$failed" -eq 0; then \
	    if test "$$xfail" -eq 0; then \
	      banner="All $$all tests passed"; \
	    else \
	      banner="All $$all tests behaved as expected ($$xfail expected failures)"; \
	    fi; \
	  else \
	    if test "$$xpass" -eq 0; then \
	      banner="$$failed of $$all tests failed"; \
	    else \
	      banner="$$failed of $$all tests did not behave as expected ($$xpass unexpected passes)"; \
	    fi; \
	  fi; \
	  dashes="$$banner"; \
	  skipped=""; \
	  if test "$$skip" -ne 0; then \
	    skipped="($$skip tests were not run)"; \
	    test `echo "$$skipped" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$skipped"; \
	  fi; \
	  report=""; \
	  if test "$$failed" -ne 0 && test -n "$(PACKAGE_BUGREPORT)"; then \
	    report="Please report to $(PACKAGE_BUGREPORT)"; \
	    test `echo "$$report" | wc -c` -le `echo "$$banner" | wc -c` || \
	      dashes="$$report"; \
	  fi; \
	  dashes=`echo "$$dashes" | sed s/./=/g`; \
	  echo "$$dashes"; \
	  echo "$$banner"; \
	  test -z "$$skipped" || echo "$$skipped"; \
	  test -z "$$report" || echo "$$report"; \
	  echo "$$dashes"; \
	  test "$$failed" -eq 0; \
	else :; fi

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
	$(MAKE) $(AM_MAKEFLAGS) $(check_PROGRAMS)
	$(MAKE) $(AM_MAKEFLAGS) check-TESTS
check: check-am
all-am: Makefile
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-checkPROGRAMS clean-generic clean-libtool \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-TESTS check-am clean \
	clean-checkPROGRAMS clean-generic clean-libtool ctags \
	distclean distclean-compile distclean-generic \
	distclean-libtool distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic mostlyclean-libtool pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-info-am


# These files should be included with the distribution.
#EXTRA_DIST = <insert data files here?>
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
