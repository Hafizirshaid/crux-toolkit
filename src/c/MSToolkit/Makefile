# Makefile.in generated by automake 1.9.6 from Makefile.am.
# src/c/MSToolkit/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



srcdir = .
top_srcdir = ../../..

pkgdatadir = $(datadir)/crux
pkglibdir = $(libdir)/crux
pkgincludedir = $(includedir)/crux
top_builddir = ../../..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
subdir = src/c/MSToolkit
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LTLIBRARIES = $(noinst_LTLIBRARIES)
libmstoolkit_la_LIBADD =
am_libmstoolkit_la_OBJECTS = libmstoolkit_la-adler32.lo \
	libmstoolkit_la-compress.lo libmstoolkit_la-crc32.lo \
	libmstoolkit_la-deflate.lo libmstoolkit_la-inffast.lo \
	libmstoolkit_la-inflate.lo libmstoolkit_la-infback.lo \
	libmstoolkit_la-inftrees.lo libmstoolkit_la-trees.lo \
	libmstoolkit_la-uncompr.lo libmstoolkit_la-zutil.lo \
	libmstoolkit_la-mzp_base64.lo libmstoolkit_la-BasicSpectrum.lo \
	libmstoolkit_la-mzParser.lo libmstoolkit_la-RAMPface.lo \
	libmstoolkit_la-saxhandler.lo \
	libmstoolkit_la-saxmzmlhandler.lo \
	libmstoolkit_la-saxmzxmlhandler.lo libmstoolkit_la-Czran.lo \
	libmstoolkit_la-xmlparse.lo libmstoolkit_la-xmlrole.lo \
	libmstoolkit_la-xmltok.lo libmstoolkit_la-sqlite3.lo \
	libmstoolkit_la-Spectrum.lo libmstoolkit_la-MSReader.lo \
	libmstoolkit_la-MSObject.lo
libmstoolkit_la_OBJECTS = $(am_libmstoolkit_la_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
LTCOMPILE = $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(LIBTOOL) --tag=CC --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \
	$(AM_LDFLAGS) $(LDFLAGS) -o $@
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
LTCXXCOMPILE = $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) \
	$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \
	$(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(LIBTOOL) --tag=CXX --mode=link $(CXXLD) $(AM_CXXFLAGS) \
	$(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libmstoolkit_la_SOURCES)
DIST_SOURCES = $(libmstoolkit_la_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /net/noble/vol2/home/mcilwain/svn/noble/crux-hardklor/config/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /net/noble/vol2/home/mcilwain/svn/noble/crux-hardklor/config/missing --run tar
AR = ar
AUTOCONF = ${SHELL} /net/noble/vol2/home/mcilwain/svn/noble/crux-hardklor/config/missing --run autoconf
AUTOHEADER = ${SHELL} /net/noble/vol2/home/mcilwain/svn/noble/crux-hardklor/config/missing --run autoheader
AUTOMAKE = ${SHELL} /net/noble/vol2/home/mcilwain/svn/noble/crux-hardklor/config/missing --run automake-1.9
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2
CYGPATH_W = echo
DARWIN_FALSE = 
DARWIN_TRUE = #
DEFS = -DHAVE_CONFIG_H
DEPDIR = .deps
ECHO = echo
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
EXEEXT = 
F77 = g77
FFLAGS = -g -O2
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lm 
LIBTOOL = $(SHELL) $(top_builddir)/libtool
LN_S = ln -s
LTLIBOBJS = 
MACHID = linux
MAKEINFO = ${SHELL} /net/noble/vol2/home/mcilwain/svn/noble/crux-hardklor/config/missing --run makeinfo
OBJEXT = o
PACKAGE = crux
PACKAGE_BUGREPORT = aklammer@u.washington.edu
PACKAGE_NAME = crux
PACKAGE_STRING = crux 1.0
PACKAGE_TARNAME = crux
PACKAGE_VERSION = 1.0
PATH_SEPARATOR = :
POW_LIB = 
PYTHON = /usr/bin/python
RANLIB = ranlib
SEARCH_FALSE = #
SEARCH_TRUE = 
SED = /bin/sed
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
USEDOUBLES_FALSE = 
USEDOUBLES_TRUE = #
VERSION = 1.36
ac_ct_AR = ar
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_F77 = g77
ac_ct_RANLIB = ranlib
ac_ct_STRIP = strip
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${prefix}/share
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /net/noble/vol2/home/mcilwain/svn/noble/crux-hardklor/config/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 

#Set your paths here.
ZLIB_PATH = ./src/zLib-1.2.5
MZPARSER_PATH = ./src/mzParser
EXPAT_PATH = ./src/expat-2.0.1
SQLITE_PATH = ./src/sqlite-3.7.7.1
MST_PATH = ./src/MSToolkit
libmstoolkit_la_SOURCES = \
  $(ZLIB_PATH)/adler32.c \
  $(ZLIB_PATH)/compress.c \
  $(ZLIB_PATH)/crc32.c \
  $(ZLIB_PATH)/deflate.c \
  $(ZLIB_PATH)/inffast.c \
  $(ZLIB_PATH)/inflate.c \
  $(ZLIB_PATH)/infback.c \
  $(ZLIB_PATH)/inftrees.c \
  $(ZLIB_PATH)/trees.c \
  $(ZLIB_PATH)/uncompr.c \
  $(ZLIB_PATH)/zutil.c \
  $(MZPARSER_PATH)/mzp_base64.cpp \
  $(MZPARSER_PATH)/BasicSpectrum.cpp \
  $(MZPARSER_PATH)/mzParser.cpp \
  $(MZPARSER_PATH)/RAMPface.cpp \
  $(MZPARSER_PATH)/saxhandler.cpp \
  $(MZPARSER_PATH)/saxmzmlhandler.cpp \
  $(MZPARSER_PATH)/saxmzxmlhandler.cpp \
  $(MZPARSER_PATH)/Czran.cpp \
  $(EXPAT_PATH)/xmlparse.c \
  $(EXPAT_PATH)/xmlrole.c \
  $(EXPAT_PATH)/xmltok.c \
  $(SQLITE_PATH)/sqlite3.c \
  $(MST_PATH)/Spectrum.cpp \
  $(MST_PATH)/MSReader.cpp \
  $(MST_PATH)/MSObject.cpp

libmstoolkit_la_CXXFLAGS = $(AM_CPPFLAGS) \
  -I$(top_srcdir)/src/c/MSToolkit/include \
  -D_LARGEFILE_SOURCE \
  -DGCC \
  -DHAVE_EXPAT_CONFIG_H \
  -D_FILE_OFFSET_BITS=64

libmstoolkit_la_CFLAGS = $(AM_CFLAGS) \
  -I$(top_srcdir)/src/c/MSToolkit/include \
  -D_LARGEFILE_SOURCE \
  -DGCC \
  -DHAVE_EXPAT_CONFIG_H \
  -D_FILE_OFFSET_BITS=64

noinst_LTLIBRARIES = libmstoolkit.la
all: all-am

.SUFFIXES:
.SUFFIXES: .c .cpp .lo .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/c/MSToolkit/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/c/MSToolkit/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLTLIBRARIES:
	-test -z "$(noinst_LTLIBRARIES)" || rm -f $(noinst_LTLIBRARIES)
	@list='$(noinst_LTLIBRARIES)'; for p in $$list; do \
	  dir="`echo $$p | sed -e 's|/[^/]*$$||'`"; \
	  test "$$dir" != "$$p" || dir=.; \
	  echo "rm -f \"$${dir}/so_locations\""; \
	  rm -f "$${dir}/so_locations"; \
	done
libmstoolkit.la: $(libmstoolkit_la_OBJECTS) $(libmstoolkit_la_DEPENDENCIES) 
	$(CXXLINK)  $(libmstoolkit_la_LDFLAGS) $(libmstoolkit_la_OBJECTS) $(libmstoolkit_la_LIBADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/libmstoolkit_la-BasicSpectrum.Plo
include ./$(DEPDIR)/libmstoolkit_la-Czran.Plo
include ./$(DEPDIR)/libmstoolkit_la-MSObject.Plo
include ./$(DEPDIR)/libmstoolkit_la-MSReader.Plo
include ./$(DEPDIR)/libmstoolkit_la-RAMPface.Plo
include ./$(DEPDIR)/libmstoolkit_la-Spectrum.Plo
include ./$(DEPDIR)/libmstoolkit_la-adler32.Plo
include ./$(DEPDIR)/libmstoolkit_la-compress.Plo
include ./$(DEPDIR)/libmstoolkit_la-crc32.Plo
include ./$(DEPDIR)/libmstoolkit_la-deflate.Plo
include ./$(DEPDIR)/libmstoolkit_la-infback.Plo
include ./$(DEPDIR)/libmstoolkit_la-inffast.Plo
include ./$(DEPDIR)/libmstoolkit_la-inflate.Plo
include ./$(DEPDIR)/libmstoolkit_la-inftrees.Plo
include ./$(DEPDIR)/libmstoolkit_la-mzParser.Plo
include ./$(DEPDIR)/libmstoolkit_la-mzp_base64.Plo
include ./$(DEPDIR)/libmstoolkit_la-saxhandler.Plo
include ./$(DEPDIR)/libmstoolkit_la-saxmzmlhandler.Plo
include ./$(DEPDIR)/libmstoolkit_la-saxmzxmlhandler.Plo
include ./$(DEPDIR)/libmstoolkit_la-sqlite3.Plo
include ./$(DEPDIR)/libmstoolkit_la-trees.Plo
include ./$(DEPDIR)/libmstoolkit_la-uncompr.Plo
include ./$(DEPDIR)/libmstoolkit_la-xmlparse.Plo
include ./$(DEPDIR)/libmstoolkit_la-xmlrole.Plo
include ./$(DEPDIR)/libmstoolkit_la-xmltok.Plo
include ./$(DEPDIR)/libmstoolkit_la-zutil.Plo

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`

.c.lo:
	if $(LTCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LTCOMPILE) -c -o $@ $<

libmstoolkit_la-adler32.lo: $(ZLIB_PATH)/adler32.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-adler32.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-adler32.Tpo" -c -o libmstoolkit_la-adler32.lo `test -f '$(ZLIB_PATH)/adler32.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/adler32.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-adler32.Tpo" "$(DEPDIR)/libmstoolkit_la-adler32.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-adler32.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/adler32.c' object='libmstoolkit_la-adler32.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-adler32.lo `test -f '$(ZLIB_PATH)/adler32.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/adler32.c

libmstoolkit_la-compress.lo: $(ZLIB_PATH)/compress.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-compress.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-compress.Tpo" -c -o libmstoolkit_la-compress.lo `test -f '$(ZLIB_PATH)/compress.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/compress.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-compress.Tpo" "$(DEPDIR)/libmstoolkit_la-compress.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-compress.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/compress.c' object='libmstoolkit_la-compress.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-compress.lo `test -f '$(ZLIB_PATH)/compress.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/compress.c

libmstoolkit_la-crc32.lo: $(ZLIB_PATH)/crc32.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-crc32.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-crc32.Tpo" -c -o libmstoolkit_la-crc32.lo `test -f '$(ZLIB_PATH)/crc32.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/crc32.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-crc32.Tpo" "$(DEPDIR)/libmstoolkit_la-crc32.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-crc32.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/crc32.c' object='libmstoolkit_la-crc32.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-crc32.lo `test -f '$(ZLIB_PATH)/crc32.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/crc32.c

libmstoolkit_la-deflate.lo: $(ZLIB_PATH)/deflate.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-deflate.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-deflate.Tpo" -c -o libmstoolkit_la-deflate.lo `test -f '$(ZLIB_PATH)/deflate.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/deflate.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-deflate.Tpo" "$(DEPDIR)/libmstoolkit_la-deflate.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-deflate.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/deflate.c' object='libmstoolkit_la-deflate.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-deflate.lo `test -f '$(ZLIB_PATH)/deflate.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/deflate.c

libmstoolkit_la-inffast.lo: $(ZLIB_PATH)/inffast.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-inffast.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-inffast.Tpo" -c -o libmstoolkit_la-inffast.lo `test -f '$(ZLIB_PATH)/inffast.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/inffast.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-inffast.Tpo" "$(DEPDIR)/libmstoolkit_la-inffast.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-inffast.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/inffast.c' object='libmstoolkit_la-inffast.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-inffast.lo `test -f '$(ZLIB_PATH)/inffast.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/inffast.c

libmstoolkit_la-inflate.lo: $(ZLIB_PATH)/inflate.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-inflate.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-inflate.Tpo" -c -o libmstoolkit_la-inflate.lo `test -f '$(ZLIB_PATH)/inflate.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/inflate.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-inflate.Tpo" "$(DEPDIR)/libmstoolkit_la-inflate.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-inflate.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/inflate.c' object='libmstoolkit_la-inflate.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-inflate.lo `test -f '$(ZLIB_PATH)/inflate.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/inflate.c

libmstoolkit_la-infback.lo: $(ZLIB_PATH)/infback.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-infback.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-infback.Tpo" -c -o libmstoolkit_la-infback.lo `test -f '$(ZLIB_PATH)/infback.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/infback.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-infback.Tpo" "$(DEPDIR)/libmstoolkit_la-infback.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-infback.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/infback.c' object='libmstoolkit_la-infback.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-infback.lo `test -f '$(ZLIB_PATH)/infback.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/infback.c

libmstoolkit_la-inftrees.lo: $(ZLIB_PATH)/inftrees.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-inftrees.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-inftrees.Tpo" -c -o libmstoolkit_la-inftrees.lo `test -f '$(ZLIB_PATH)/inftrees.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/inftrees.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-inftrees.Tpo" "$(DEPDIR)/libmstoolkit_la-inftrees.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-inftrees.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/inftrees.c' object='libmstoolkit_la-inftrees.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-inftrees.lo `test -f '$(ZLIB_PATH)/inftrees.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/inftrees.c

libmstoolkit_la-trees.lo: $(ZLIB_PATH)/trees.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-trees.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-trees.Tpo" -c -o libmstoolkit_la-trees.lo `test -f '$(ZLIB_PATH)/trees.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/trees.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-trees.Tpo" "$(DEPDIR)/libmstoolkit_la-trees.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-trees.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/trees.c' object='libmstoolkit_la-trees.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-trees.lo `test -f '$(ZLIB_PATH)/trees.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/trees.c

libmstoolkit_la-uncompr.lo: $(ZLIB_PATH)/uncompr.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-uncompr.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-uncompr.Tpo" -c -o libmstoolkit_la-uncompr.lo `test -f '$(ZLIB_PATH)/uncompr.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/uncompr.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-uncompr.Tpo" "$(DEPDIR)/libmstoolkit_la-uncompr.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-uncompr.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/uncompr.c' object='libmstoolkit_la-uncompr.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-uncompr.lo `test -f '$(ZLIB_PATH)/uncompr.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/uncompr.c

libmstoolkit_la-zutil.lo: $(ZLIB_PATH)/zutil.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-zutil.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-zutil.Tpo" -c -o libmstoolkit_la-zutil.lo `test -f '$(ZLIB_PATH)/zutil.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/zutil.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-zutil.Tpo" "$(DEPDIR)/libmstoolkit_la-zutil.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-zutil.Tpo"; exit 1; fi
#	source='$(ZLIB_PATH)/zutil.c' object='libmstoolkit_la-zutil.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-zutil.lo `test -f '$(ZLIB_PATH)/zutil.c' || echo '$(srcdir)/'`$(ZLIB_PATH)/zutil.c

libmstoolkit_la-xmlparse.lo: $(EXPAT_PATH)/xmlparse.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-xmlparse.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-xmlparse.Tpo" -c -o libmstoolkit_la-xmlparse.lo `test -f '$(EXPAT_PATH)/xmlparse.c' || echo '$(srcdir)/'`$(EXPAT_PATH)/xmlparse.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-xmlparse.Tpo" "$(DEPDIR)/libmstoolkit_la-xmlparse.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-xmlparse.Tpo"; exit 1; fi
#	source='$(EXPAT_PATH)/xmlparse.c' object='libmstoolkit_la-xmlparse.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-xmlparse.lo `test -f '$(EXPAT_PATH)/xmlparse.c' || echo '$(srcdir)/'`$(EXPAT_PATH)/xmlparse.c

libmstoolkit_la-xmlrole.lo: $(EXPAT_PATH)/xmlrole.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-xmlrole.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-xmlrole.Tpo" -c -o libmstoolkit_la-xmlrole.lo `test -f '$(EXPAT_PATH)/xmlrole.c' || echo '$(srcdir)/'`$(EXPAT_PATH)/xmlrole.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-xmlrole.Tpo" "$(DEPDIR)/libmstoolkit_la-xmlrole.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-xmlrole.Tpo"; exit 1; fi
#	source='$(EXPAT_PATH)/xmlrole.c' object='libmstoolkit_la-xmlrole.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-xmlrole.lo `test -f '$(EXPAT_PATH)/xmlrole.c' || echo '$(srcdir)/'`$(EXPAT_PATH)/xmlrole.c

libmstoolkit_la-xmltok.lo: $(EXPAT_PATH)/xmltok.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-xmltok.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-xmltok.Tpo" -c -o libmstoolkit_la-xmltok.lo `test -f '$(EXPAT_PATH)/xmltok.c' || echo '$(srcdir)/'`$(EXPAT_PATH)/xmltok.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-xmltok.Tpo" "$(DEPDIR)/libmstoolkit_la-xmltok.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-xmltok.Tpo"; exit 1; fi
#	source='$(EXPAT_PATH)/xmltok.c' object='libmstoolkit_la-xmltok.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-xmltok.lo `test -f '$(EXPAT_PATH)/xmltok.c' || echo '$(srcdir)/'`$(EXPAT_PATH)/xmltok.c

libmstoolkit_la-sqlite3.lo: $(SQLITE_PATH)/sqlite3.c
	if $(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -MT libmstoolkit_la-sqlite3.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-sqlite3.Tpo" -c -o libmstoolkit_la-sqlite3.lo `test -f '$(SQLITE_PATH)/sqlite3.c' || echo '$(srcdir)/'`$(SQLITE_PATH)/sqlite3.c; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-sqlite3.Tpo" "$(DEPDIR)/libmstoolkit_la-sqlite3.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-sqlite3.Tpo"; exit 1; fi
#	source='$(SQLITE_PATH)/sqlite3.c' object='libmstoolkit_la-sqlite3.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CC --mode=compile $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CFLAGS) $(CFLAGS) -c -o libmstoolkit_la-sqlite3.lo `test -f '$(SQLITE_PATH)/sqlite3.c' || echo '$(srcdir)/'`$(SQLITE_PATH)/sqlite3.c

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

.cpp.lo:
	if $(LTCXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Plo"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LTCXXCOMPILE) -c -o $@ $<

libmstoolkit_la-mzp_base64.lo: $(MZPARSER_PATH)/mzp_base64.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-mzp_base64.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-mzp_base64.Tpo" -c -o libmstoolkit_la-mzp_base64.lo `test -f '$(MZPARSER_PATH)/mzp_base64.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/mzp_base64.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-mzp_base64.Tpo" "$(DEPDIR)/libmstoolkit_la-mzp_base64.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-mzp_base64.Tpo"; exit 1; fi
#	source='$(MZPARSER_PATH)/mzp_base64.cpp' object='libmstoolkit_la-mzp_base64.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-mzp_base64.lo `test -f '$(MZPARSER_PATH)/mzp_base64.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/mzp_base64.cpp

libmstoolkit_la-BasicSpectrum.lo: $(MZPARSER_PATH)/BasicSpectrum.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-BasicSpectrum.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-BasicSpectrum.Tpo" -c -o libmstoolkit_la-BasicSpectrum.lo `test -f '$(MZPARSER_PATH)/BasicSpectrum.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/BasicSpectrum.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-BasicSpectrum.Tpo" "$(DEPDIR)/libmstoolkit_la-BasicSpectrum.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-BasicSpectrum.Tpo"; exit 1; fi
#	source='$(MZPARSER_PATH)/BasicSpectrum.cpp' object='libmstoolkit_la-BasicSpectrum.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-BasicSpectrum.lo `test -f '$(MZPARSER_PATH)/BasicSpectrum.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/BasicSpectrum.cpp

libmstoolkit_la-mzParser.lo: $(MZPARSER_PATH)/mzParser.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-mzParser.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-mzParser.Tpo" -c -o libmstoolkit_la-mzParser.lo `test -f '$(MZPARSER_PATH)/mzParser.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/mzParser.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-mzParser.Tpo" "$(DEPDIR)/libmstoolkit_la-mzParser.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-mzParser.Tpo"; exit 1; fi
#	source='$(MZPARSER_PATH)/mzParser.cpp' object='libmstoolkit_la-mzParser.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-mzParser.lo `test -f '$(MZPARSER_PATH)/mzParser.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/mzParser.cpp

libmstoolkit_la-RAMPface.lo: $(MZPARSER_PATH)/RAMPface.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-RAMPface.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-RAMPface.Tpo" -c -o libmstoolkit_la-RAMPface.lo `test -f '$(MZPARSER_PATH)/RAMPface.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/RAMPface.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-RAMPface.Tpo" "$(DEPDIR)/libmstoolkit_la-RAMPface.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-RAMPface.Tpo"; exit 1; fi
#	source='$(MZPARSER_PATH)/RAMPface.cpp' object='libmstoolkit_la-RAMPface.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-RAMPface.lo `test -f '$(MZPARSER_PATH)/RAMPface.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/RAMPface.cpp

libmstoolkit_la-saxhandler.lo: $(MZPARSER_PATH)/saxhandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-saxhandler.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-saxhandler.Tpo" -c -o libmstoolkit_la-saxhandler.lo `test -f '$(MZPARSER_PATH)/saxhandler.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/saxhandler.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-saxhandler.Tpo" "$(DEPDIR)/libmstoolkit_la-saxhandler.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-saxhandler.Tpo"; exit 1; fi
#	source='$(MZPARSER_PATH)/saxhandler.cpp' object='libmstoolkit_la-saxhandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-saxhandler.lo `test -f '$(MZPARSER_PATH)/saxhandler.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/saxhandler.cpp

libmstoolkit_la-saxmzmlhandler.lo: $(MZPARSER_PATH)/saxmzmlhandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-saxmzmlhandler.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-saxmzmlhandler.Tpo" -c -o libmstoolkit_la-saxmzmlhandler.lo `test -f '$(MZPARSER_PATH)/saxmzmlhandler.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/saxmzmlhandler.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-saxmzmlhandler.Tpo" "$(DEPDIR)/libmstoolkit_la-saxmzmlhandler.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-saxmzmlhandler.Tpo"; exit 1; fi
#	source='$(MZPARSER_PATH)/saxmzmlhandler.cpp' object='libmstoolkit_la-saxmzmlhandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-saxmzmlhandler.lo `test -f '$(MZPARSER_PATH)/saxmzmlhandler.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/saxmzmlhandler.cpp

libmstoolkit_la-saxmzxmlhandler.lo: $(MZPARSER_PATH)/saxmzxmlhandler.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-saxmzxmlhandler.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-saxmzxmlhandler.Tpo" -c -o libmstoolkit_la-saxmzxmlhandler.lo `test -f '$(MZPARSER_PATH)/saxmzxmlhandler.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/saxmzxmlhandler.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-saxmzxmlhandler.Tpo" "$(DEPDIR)/libmstoolkit_la-saxmzxmlhandler.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-saxmzxmlhandler.Tpo"; exit 1; fi
#	source='$(MZPARSER_PATH)/saxmzxmlhandler.cpp' object='libmstoolkit_la-saxmzxmlhandler.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-saxmzxmlhandler.lo `test -f '$(MZPARSER_PATH)/saxmzxmlhandler.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/saxmzxmlhandler.cpp

libmstoolkit_la-Czran.lo: $(MZPARSER_PATH)/Czran.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-Czran.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-Czran.Tpo" -c -o libmstoolkit_la-Czran.lo `test -f '$(MZPARSER_PATH)/Czran.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/Czran.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-Czran.Tpo" "$(DEPDIR)/libmstoolkit_la-Czran.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-Czran.Tpo"; exit 1; fi
#	source='$(MZPARSER_PATH)/Czran.cpp' object='libmstoolkit_la-Czran.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-Czran.lo `test -f '$(MZPARSER_PATH)/Czran.cpp' || echo '$(srcdir)/'`$(MZPARSER_PATH)/Czran.cpp

libmstoolkit_la-Spectrum.lo: $(MST_PATH)/Spectrum.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-Spectrum.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-Spectrum.Tpo" -c -o libmstoolkit_la-Spectrum.lo `test -f '$(MST_PATH)/Spectrum.cpp' || echo '$(srcdir)/'`$(MST_PATH)/Spectrum.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-Spectrum.Tpo" "$(DEPDIR)/libmstoolkit_la-Spectrum.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-Spectrum.Tpo"; exit 1; fi
#	source='$(MST_PATH)/Spectrum.cpp' object='libmstoolkit_la-Spectrum.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-Spectrum.lo `test -f '$(MST_PATH)/Spectrum.cpp' || echo '$(srcdir)/'`$(MST_PATH)/Spectrum.cpp

libmstoolkit_la-MSReader.lo: $(MST_PATH)/MSReader.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-MSReader.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-MSReader.Tpo" -c -o libmstoolkit_la-MSReader.lo `test -f '$(MST_PATH)/MSReader.cpp' || echo '$(srcdir)/'`$(MST_PATH)/MSReader.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-MSReader.Tpo" "$(DEPDIR)/libmstoolkit_la-MSReader.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-MSReader.Tpo"; exit 1; fi
#	source='$(MST_PATH)/MSReader.cpp' object='libmstoolkit_la-MSReader.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-MSReader.lo `test -f '$(MST_PATH)/MSReader.cpp' || echo '$(srcdir)/'`$(MST_PATH)/MSReader.cpp

libmstoolkit_la-MSObject.lo: $(MST_PATH)/MSObject.cpp
	if $(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -MT libmstoolkit_la-MSObject.lo -MD -MP -MF "$(DEPDIR)/libmstoolkit_la-MSObject.Tpo" -c -o libmstoolkit_la-MSObject.lo `test -f '$(MST_PATH)/MSObject.cpp' || echo '$(srcdir)/'`$(MST_PATH)/MSObject.cpp; \
	then mv -f "$(DEPDIR)/libmstoolkit_la-MSObject.Tpo" "$(DEPDIR)/libmstoolkit_la-MSObject.Plo"; else rm -f "$(DEPDIR)/libmstoolkit_la-MSObject.Tpo"; exit 1; fi
#	source='$(MST_PATH)/MSObject.cpp' object='libmstoolkit_la-MSObject.lo' libtool=yes \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(LIBTOOL) --tag=CXX --mode=compile $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libmstoolkit_la_CXXFLAGS) $(CXXFLAGS) -c -o libmstoolkit_la-MSObject.lo `test -f '$(MST_PATH)/MSObject.cpp' || echo '$(srcdir)/'`$(MST_PATH)/MSObject.cpp

mostlyclean-libtool:
	-rm -f *.lo

clean-libtool:
	-rm -rf .libs _libs

distclean-libtool:
	-rm -f libtool
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LTLIBRARIES)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-libtool clean-noinstLTLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-libtool distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic \
	mostlyclean-libtool

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-libtool clean-noinstLTLIBRARIES ctags distclean \
	distclean-compile distclean-generic distclean-libtool \
	distclean-tags distdir dvi dvi-am html html-am info info-am \
	install install-am install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic mostlyclean-libtool \
	pdf pdf-am ps ps-am tags uninstall uninstall-am \
	uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
