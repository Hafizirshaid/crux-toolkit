#@@ if a showcase complicated the initial example then it should
#   be implemented as a separate example.

%% build with nested directories from single Makefile

%% generation of headers/sources from some other source with
   automatically generated dependencies (IDL showcase)

%% two executables in the same dir (though generally not recomended)

%% selection of PIC by a target (target-specific variables 
   inheritance) (read the bug report about this feature).

%% directory Makefiles (need a nice name for them)

%@ configuration target

   - implemented disfigure only (for now).
   
   - not complete
   
   - need to implement configuration of installed dependencies.

%@ installation target

   - prototype design
   
   - needs completion

%@ test target

   - only in libhello

%% generation of actual dependencies for C++/C

@@ use of C & C++ compiler from the same Makefile

@@ another C++/C compiler (Sun CC?)

@@ cleaning after messy compilers (Sun CC?)

@@ c subsystem

@@ Quite mode. all answers defaulted. Error if something is wrong.

@@ I need some way of programmatically supplying configuration 
   information (for example for debian package creation). Via
   command line variables seems like a reasonable approach. Also
   saving configuration seems like a good idea too (i.e. keeping
   configuration around) but then I need to make sure there are
   no absolute paths.

%@ Installation process for the build system itself.

   - now installs only build system itself.

%% What am I going to do with corba? Maybe package it as a separate
   incomplete subsystem?

@% All those "file not found" messages by make are quite nasty. I should
   either fix make (preferable) or use -include.
   
   - using -include for now

%% variable unsetting: do I still need it? Yes I do.

@@ installation of examples

@@ need to clean source code out of @@

@! target-specific vpath

@! Can .INTERMIDIATE help me with .d problem? No! Also it seems
   saying something like %.o %.d: %.cxx won't work either? Need
   to check this.

@! Need to run ranlib on certain platforms. Need to detect if I need to.

@! .cpp-options: if add/remove .cpp-options prereqs the target file does not
   get regenerated. Probably need to save list of prereqs and compare with it.
   
@! shared library versioning

@! Need to think on a general idea of state saving (like I do with 
   .cpp-options). Is there a cleaner way of doing this?
