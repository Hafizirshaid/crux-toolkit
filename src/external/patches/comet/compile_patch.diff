Index: Common.h
===================================================================
--- Common.h	(revision 110)
+++ Common.h	(working copy)
@@ -42,7 +42,11 @@
 #include "MSObject.h"
 #include <vector>
 
+#ifdef CRUX
+#include <iostream>
+#endif
 
+
 #define comet_version   "2013.01 rev. 0"
 #define copyright "(c) University of Washington"
 
@@ -50,4 +54,18 @@
 // now between 0.0 and 1.0 and scales to the binWidth.
 #define BIN(dMass) (int)(dMass*g_StaticParams.dInverseBinWidth + g_StaticParams.dOneMinusBinOffset)
 
+#ifdef CRUX
+int comet_main(int argc, char*argv[]);
+#endif
+using namespace MSToolkit;
+
+#ifdef CRUX
+#define log(...) {char sbuf[1000]; snprintf(sbuf, 1000, __VA_ARGS__); cerr << sbuf;}
+#define logerr(...) {char sbuf[1000]; snprintf(sbuf, 1000, __VA_ARGS__); cerr << sbuf;}
+#else
+#define log(...) printf(format, __VA_ARGS__)
+#define logerr(...) fprintf(stderr, format, __VA_ARGS__)
+#endif
+
+
 #endif // _COMMON_H_
Index: CometData.h
===================================================================
--- CometData.h	(revision 110)
+++ CometData.h	(working copy)
@@ -369,6 +369,7 @@
    char            szIonSeries[200];   // used for .out files
    char            szDisplayLine[200]; // used for .out files
    char            szMod[280];         // used for .out files
+   char            szDecoyPrefix[200]; // used for prefix to indicate decoys
    int             iElapseTime;
    DateTimeInfo    _dtInfoStart;
    Options         options;
Index: CometWritePepXML.cpp
===================================================================
--- CometWritePepXML.cpp	(revision 110)
+++ CometWritePepXML.cpp	(working copy)
@@ -98,7 +98,7 @@
    // Grab file extension from file name
    if ( (pStr2 = strrchr(g_StaticParams.inputFile.szFileName, '.')) == NULL)
    {
-      printf(" Error - in WriteXMLHeader missing last period in file name: %s\n", g_StaticParams.inputFile.szFileName);
+      log(" Error - in WriteXMLHeader missing last period in file name: %s\n", g_StaticParams.inputFile.szFileName);
       exit(1);
    }
    pStr2++;
@@ -126,7 +126,7 @@
    char szParamBuf[SIZE_BUF];
    if ((fp=fopen(szParamsFile, "r")) == NULL)
    {
-      fprintf(stderr, " Error - cannot open parameter file %s.\n\n", szParamsFile);
+      logerr(" Error - cannot open parameter file %s.\n\n", szParamsFile);
       exit(1);
    }
 
Index: MSToolkit/include/H5DataSet.h
===================================================================
--- MSToolkit/include/H5DataSet.h	(revision 110)
+++ MSToolkit/include/H5DataSet.h	(working copy)
@@ -110,7 +110,7 @@
    private:
 	hid_t id;       // HDF5 dataset id
 
-#ifndef DOXYGEN_SHOULD_SKIP_THIS
+  //#ifndef DOXYGEN_SHOULD_SKIP_THIS
         // This function contains the common code that is used by
         // getTypeClass and various API functions getXxxType
         // defined in AbstractDs for generic datatype and specific
@@ -124,7 +124,7 @@
    protected:
         // Sets the dataset id.
         virtual void p_setId(const hid_t new_id);
-#endif // DOXYGEN_SHOULD_SKIP_THIS
+  //#endif // DOXYGEN_SHOULD_SKIP_THIS
 };
 #ifndef H5_NO_NAMESPACE
 }
Index: MSToolkit/include/xmltok.h
===================================================================
--- MSToolkit/include/xmltok.h	(revision 110)
+++ MSToolkit/include/xmltok.h	(working copy)
@@ -5,6 +5,8 @@
 #ifndef XmlTok_INCLUDED
 #define XmlTok_INCLUDED 1
 
+#include "expat.h"
+
 #ifdef __cplusplus
 extern "C" {
 #endif
Index: MSToolkit/include/Spectrum.h
===================================================================
--- MSToolkit/include/Spectrum.h	(revision 110)
+++ MSToolkit/include/Spectrum.h	(working copy)
@@ -9,6 +9,7 @@
 
 using namespace std;
 
+namespace MSToolkit {
 class Spectrum {
  public:
   //Constructors & Destructors
@@ -148,6 +149,7 @@
 
 };
 
+}
 
 #endif
 
Index: MSToolkit/include/H5CommonFG.h
===================================================================
--- MSToolkit/include/H5CommonFG.h	(revision 110)
+++ MSToolkit/include/H5CommonFG.h	(working copy)
@@ -147,12 +147,12 @@
 	VarLenType openVarLenType(const char* name) const;
 	VarLenType openVarLenType(const H5std_string& name) const;
 
-#ifndef DOXYGEN_SHOULD_SKIP_THIS
+  //#ifndef DOXYGEN_SHOULD_SKIP_THIS
 	/// For subclasses, H5File and Group, to return the correct
 	/// object id, i.e. file or group id.
 	virtual hid_t getLocId() const = 0;
 
-#endif // DOXYGEN_SHOULD_SKIP_THIS
+  //#endif // DOXYGEN_SHOULD_SKIP_THIS
 
 	/// For subclasses, H5File and Group, to throw appropriate exception.
 	virtual void throwException(const H5std_string& func_name, const H5std_string& msg) const = 0;
Index: MSToolkit/include/MSObject.h
===================================================================
--- MSToolkit/include/MSObject.h	(revision 110)
+++ MSToolkit/include/MSObject.h	(working copy)
@@ -8,6 +8,7 @@
 
 using namespace std;
 
+namespace MSToolkit {
 class MSObject {
  public:
   //Constructors & Destructors
@@ -40,5 +41,6 @@
   
 };
 
+}
 #endif
 
Index: MSToolkit/include/H5Object.h
===================================================================
--- MSToolkit/include/H5Object.h	(revision 110)
+++ MSToolkit/include/H5Object.h	(working copy)
@@ -27,7 +27,7 @@
 namespace H5 {
 #endif
 
-#ifndef DOXYGEN_SHOULD_SKIP_THIS
+  //#ifndef DOXYGEN_SHOULD_SKIP_THIS
 class H5_DLLCPP H5Object;  // forward declaration for UserData4Aiterate
 
 // Define the operator function pointer for H5Aiterate().
@@ -41,7 +41,7 @@
 	void* opData;
 	H5Object* object;
 };
-#endif // DOXYGEN_SHOULD_SKIP_THIS
+  //#endif // DOXYGEN_SHOULD_SKIP_THIS
 
 // The above part is being moved into Iterator, but not completed
 
@@ -99,7 +99,7 @@
 	virtual ~H5Object();
 
    protected:
-#ifndef DOXYGEN_SHOULD_SKIP_THIS
+  //#ifndef DOXYGEN_SHOULD_SKIP_THIS
 	// Default constructor
 	H5Object();
 
@@ -123,7 +123,7 @@
 	// Retrieves a dataspace with the region pointed to selected.
 	hid_t p_get_region(void *ref, H5R_type_t ref_type) const;
 
-#endif // DOXYGEN_SHOULD_SKIP_THIS
+  //#endif // DOXYGEN_SHOULD_SKIP_THIS
 
 }; /* end class H5Object */
 
Index: MSToolkit/include/MSToolkitTypes.h
===================================================================
--- MSToolkit/include/MSToolkitTypes.h	(revision 110)
+++ MSToolkit/include/MSToolkitTypes.h	(working copy)
@@ -2,6 +2,7 @@
 #define _MSTOOLKITTYPES_H
 
 #include <stddef.h>
+namespace MSToolkit {
 
 enum MSSpectrumType {
   MS1,
@@ -114,6 +115,8 @@
   float pArea;    //precursor retention time
 };
 
+}
+
 #endif
 
 
Index: MSToolkit/include/MSReader.h
===================================================================
--- MSToolkit/include/MSReader.h	(revision 110)
+++ MSToolkit/include/MSReader.h	(working copy)
@@ -53,6 +53,7 @@
 
 using namespace std;
 
+namespace MSToolkit {
 class MSReader {
  public:
   //Constructors & Destructors
@@ -173,5 +174,6 @@
 
 };
 
+}
 #endif
 
Index: MSToolkit/src/MSToolkit/Spectrum.cpp
===================================================================
--- MSToolkit/src/MSToolkit/Spectrum.cpp	(revision 110)
+++ MSToolkit/src/MSToolkit/Spectrum.cpp	(working copy)
@@ -4,6 +4,7 @@
 
 using namespace std;
 
+namespace MSToolkit {
 Spectrum::Spectrum(){
   //cout<<"in Spectrum constructor!"<<endl;
 
@@ -569,3 +570,4 @@
   else return 0;
 }
 
+}
Index: MSToolkit/src/MSToolkit/MSReader.cpp
===================================================================
--- MSToolkit/src/MSToolkit/MSReader.cpp	(revision 110)
+++ MSToolkit/src/MSToolkit/MSReader.cpp	(working copy)
@@ -2,6 +2,8 @@
 #include <iostream>
 using namespace std;
 
+namespace MSToolkit {
+
 MSReader::MSReader(){
   fileIn=NULL;
   rampFileIn=NULL;
@@ -1976,3 +1978,4 @@
 
 }
 
+}
Index: MSToolkit/src/MSToolkit/MSObject.cpp
===================================================================
--- MSToolkit/src/MSToolkit/MSObject.cpp	(revision 110)
+++ MSToolkit/src/MSToolkit/MSObject.cpp	(working copy)
@@ -3,6 +3,8 @@
 
 using namespace std;
 
+namespace MSToolkit {
+
 MSObject::MSObject(){
   vSpectrum = new vector<Spectrum>;
   fileName="";
@@ -96,3 +98,4 @@
   return vSpectrum->size();
 };
 
+}
Index: MSToolkit/src/expat-2.0.1/xmlparse.c
===================================================================
--- MSToolkit/src/expat-2.0.1/xmlparse.c	(revision 110)
+++ MSToolkit/src/expat-2.0.1/xmlparse.c	(working copy)
@@ -21,7 +21,7 @@
 #endif /* ndef COMPILED_FROM_DSP */
 
 #include "ascii.h"
-#include "expat.h"
+//#include "expat.h"
 
 #ifdef XML_UNICODE
 #define XML_ENCODE_MAX XML_UTF16_ENCODE_MAX
Index: Comet.cpp
===================================================================
--- Comet.cpp	(revision 110)
+++ Comet.cpp	(working copy)
@@ -67,8 +67,11 @@
    return (a->_pepMassInfo.dExpPepMass < b->_pepMassInfo.dExpPepMass);
 }
 
-
+#if CRUX
+int comet_main(int argc, char *argv[])
+#else
 int main(int argc, char *argv[])
+#endif 
 {
    char szParamsFile[SIZE_FILE];
 
@@ -85,8 +88,8 @@
          && !g_StaticParams.options.bOutputPepXMLFile
          && !g_StaticParams.options.bOutputOutFiles)
    {
-      printf("\n Comet version \"%s\"\n", comet_version);
-      printf(" Please specify at least one output format.\n\n");
+      log("\n Comet version \"%s\"\n", comet_version);
+      log(" Please specify at least one output format.\n\n");
       exit(1);
    }
 
@@ -118,8 +121,8 @@
 
        if (!g_StaticParams.options.bOutputSqtStream)
        {
-          printf(" Comet version \"%s\"\n", comet_version);
-          printf(" Search start:  %s\n", g_StaticParams._dtInfoStart.szDate);
+          log(" Comet version \"%s\"\n", comet_version);
+          log(" Search start:  %s\n", g_StaticParams._dtInfoStart.szDate);
        }
 
        int iFirstScan = g_StaticParams.inputFile.iFirstScan;             // First scan to search specified by user.
@@ -148,13 +151,13 @@
        if (g_StaticParams.options.bOutputSqtFile)
        {
           if (iAnalysisType == AnalysisType_EntireFile)
-             sprintf(szOutputSQT, "%s.sqt", g_StaticParams.inputFile.szBaseName);
+             sprintf(szOutputSQT, "%s.target.sqt", g_StaticParams.inputFile.szBaseName);
           else
-             sprintf(szOutputSQT, "%s.%d-%d.sqt", g_StaticParams.inputFile.szBaseName, iFirstScan, iLastScan);
+             sprintf(szOutputSQT, "%s.target.%d-%d.sqt", g_StaticParams.inputFile.szBaseName, iFirstScan, iLastScan);
 
           if ((fpout_sqt = fopen(szOutputSQT, "w")) == NULL)
           {
-             fprintf(stderr, "Error - cannot write to file \"%s\".\n\n", szOutputSQT);
+             logerr("Error - cannot write to file \"%s\".\n\n", szOutputSQT);
              exit(1);
           }
 
@@ -167,7 +170,7 @@
 
              if ((fpoutd_sqt = fopen(szOutputDecoySQT, "w")) == NULL)
              {
-                fprintf(stderr, "Error - cannot write to decoy file \"%s\".\n\n", szOutputDecoySQT);
+                logerr("Error - cannot write to decoy file \"%s\".\n\n", szOutputDecoySQT);
                 exit(1);
              }
           }
@@ -176,13 +179,13 @@
        if (g_StaticParams.options.bOutputTxtFile)
        {
           if (iAnalysisType == AnalysisType_EntireFile)
-             sprintf(szOutputTxt, "%s.txt", g_StaticParams.inputFile.szBaseName);
+             sprintf(szOutputTxt, "%s.target.txt", g_StaticParams.inputFile.szBaseName);
           else
-             sprintf(szOutputTxt, "%s.%d-%d.txt", g_StaticParams.inputFile.szBaseName, iFirstScan, iLastScan);
+             sprintf(szOutputTxt, "%s.target.%d-%d.txt", g_StaticParams.inputFile.szBaseName, iFirstScan, iLastScan);
 
           if ((fpout_txt = fopen(szOutputTxt, "w")) == NULL)
           {
-             fprintf(stderr, "Error - cannot write to file \"%s\".\n\n", szOutputTxt);
+             logerr("Error - cannot write to file \"%s\".\n\n", szOutputTxt);
              exit(1);
           }
 
@@ -195,7 +198,7 @@
 
              if ((fpoutd_txt= fopen(szOutputDecoyTxt, "w")) == NULL)
              {
-                fprintf(stderr, "Error - cannot write to decoy file \"%s\".\n\n", szOutputDecoyTxt);
+                logerr("Error - cannot write to decoy file \"%s\".\n\n", szOutputDecoyTxt);
                 exit(1);
              }
           }
@@ -204,13 +207,13 @@
        if (g_StaticParams.options.bOutputPepXMLFile)
        {
           if (iAnalysisType == AnalysisType_EntireFile)
-             sprintf(szOutputPepXML, "%s.pep.xml", g_StaticParams.inputFile.szBaseName);
+             sprintf(szOutputPepXML, "%s.target.pep.xml", g_StaticParams.inputFile.szBaseName);
           else
-             sprintf(szOutputPepXML, "%s.%d-%d.pep.xml", g_StaticParams.inputFile.szBaseName, iFirstScan, iLastScan);
+             sprintf(szOutputPepXML, "%s.target.%d-%d.pep.xml", g_StaticParams.inputFile.szBaseName, iFirstScan, iLastScan);
 
           if ((fpout_pepxml = fopen(szOutputPepXML, "w")) == NULL)
           {
-             fprintf(stderr, "Error - cannot write to file \"%s\".\n\n", szOutputPepXML);
+             logerr("Error - cannot write to file \"%s\".\n\n", szOutputPepXML);
              exit(1);
           }
 
@@ -225,7 +228,7 @@
 
              if ((fpoutd_pepxml = fopen(szOutputDecoyPepXML, "w")) == NULL)
              {
-                fprintf(stderr, "Error - cannot write to decoy file \"%s\".\n\n", szOutputDecoyPepXML);
+                logerr("Error - cannot write to decoy file \"%s\".\n\n", szOutputDecoyPepXML);
                 exit(1);
              }
 
@@ -248,7 +251,7 @@
        {
           // Load and preprocess all the spectra.
           if (!g_StaticParams.options.bOutputSqtStream)
-             printf(" - Load and process input spectra\n");
+             log(" - Load and process input spectra\n");
 
           CometPreprocess::LoadAndPreprocessSpectra(mstReader,
                 iFirstScan, iLastScan, iAnalysisType,
@@ -262,12 +265,12 @@
 
           // Allocate memory to store results for each query spectrum.
           if (!g_StaticParams.options.bOutputSqtStream)
-             printf(" - Allocate memory to store results\n");
+             log(" - Allocate memory to store results\n");
 
           AllocateResultsMem();
 
           if (!g_StaticParams.options.bOutputSqtStream)
-             printf(" - Number of mass-charge spectra loaded: %d\n", (int)g_pvQuery.size());
+             log(" - Number of mass-charge spectra loaded: %d\n", (int)g_pvQuery.size());
 
           // Sort g_pvQuery vector by dExpPepMass.
           std::sort(g_pvQuery.begin(), g_pvQuery.end(), compareByPeptideMass);
@@ -284,7 +287,7 @@
           CalcRunTime(tStartTime);
 
           if (!g_StaticParams.options.bOutputSqtStream)
-             printf(" - Write output\n");
+             log(" - Write output\n");
 
           if (g_StaticParams.options.bOutputOutFiles)
              CometWriteOut::WriteOut();
@@ -308,14 +311,14 @@
        }
        if (iTotalSpectraSearched == 0)
        {
-          printf(" Warning - no spectra searched.\n\n");
+          log(" Warning - no spectra searched.\n\n");
        }
 
        if (!g_StaticParams.options.bOutputSqtStream)
        {
           time(&tStartTime);
           strftime(g_StaticParams._dtInfoStart.szDate, 26, "%m/%d/%Y, %I:%M:%S %p", localtime(&tStartTime));
-          printf(" Search end:    %s\n\n", g_StaticParams._dtInfoStart.szDate);
+          log(" Search end:    %s\n\n", g_StaticParams._dtInfoStart.szDate);
        }
 
        if (NULL != fpout_pepxml)
@@ -371,7 +374,7 @@
 
       if (pQuery->_pResults == NULL)
       {
-         fprintf(stderr, " Error malloc(_pResults[])\n");
+         logerr(" Error malloc(_pResults[])\n");
          exit(1);
       }
 
@@ -389,7 +392,7 @@
 
          if (pQuery->_pDecoys == NULL)
          {
-            fprintf(stderr, " Error malloc(_pDecoys[])\n");
+            logerr(" Error malloc(_pDecoys[])\n");
             exit(1);
          }
 
@@ -430,25 +433,25 @@
 
 void Usage(int failure, char *pszCmd)
 {
-   printf("\n");
-   printf(" Comet version \"%s\"\n %s\n", comet_version, copyright);
-   printf("\n");
-   printf(" Comet usage:  %s [options] <input_files>\n", pszCmd);
-   printf("\n");
-   printf(" Supported input formats include mzXML, mzXML, mz5 and ms2 variants (cms2, bms2, ms2)\n");
-   printf("\n");
-   printf("       options:  -p         to print out a comet.params file (named comet.params.new)\n");
-   printf("                 -P<params> to specify an alternate parameters file (default comet.params)\n");
-   printf("                 -N<name>   to specify an alternate output base name; valid only with one input file\n");
-   printf("                 -D<dbase>  to specify a sequence database, overriding entry in parameters file\n");
-   printf("                 -F<num>    to specify the first/start scan to search, overriding entry in parameters file\n");
-   printf("                 -L<num>    to specify the last/end scan to search, overriding entry in parameters file\n");
-   printf("                            (-L option is required if -F option is used)\n");
-   printf("\n");
-   printf("       example:  %s file1.mzXML file2.mzXML\n", pszCmd);
-   printf("            or   %s -F1000 -L1500 file1.mzXML    <- to search scans 1000 through 1500\n", pszCmd);
-   printf("            or   %s -pParams.txt *.mzXML         <- use parameters in the file 'Params.txt'\n", pszCmd);
-   printf("\n");
+   log("\n");
+   log(" Comet version \"%s\"\n %s\n", comet_version, copyright);
+   log("\n");
+   log(" Comet usage:  %s [options] <input_files>\n", pszCmd);
+   log("\n");
+   log(" Supported input formats include mzXML, mzXML, mz5 and ms2 variants (cms2, bms2, ms2)\n");
+   log("\n");
+   log("       options:  -p         to print out a comet.params file (named comet.params.new)\n");
+   log("                 -P<params> to specify an alternate parameters file (default comet.params)\n");
+   log("                 -N<name>   to specify an alternate output base name; valid only with one input file\n");
+   log("                 -D<dbase>  to specify a sequence database, overriding entry in parameters file\n");
+   log("                 -F<num>    to specify the first/start scan to search, overriding entry in parameters file\n");
+   log("                 -L<num>    to specify the last/end scan to search, overriding entry in parameters file\n");
+   log("                            (-L option is required if -F option is used)\n");
+   log("\n");
+   log("       example:  %s file1.mzXML file2.mzXML\n", pszCmd);
+   log("            or   %s -F1000 -L1500 file1.mzXML    <- to search scans 1000 through 1500\n", pszCmd);
+   log("            or   %s -pParams.txt *.mzXML         <- use parameters in the file 'Params.txt'\n", pszCmd);
+   log("\n");
 
    exit(1);
 }
@@ -484,38 +487,44 @@
    switch (arg[1])
    {
       case 'D':   // Alternate sequence database.
-         if (sscanf(arg+2, "%512s", szTmp) == 0)
-            fprintf(stderr, "Cannot read command line database: '%s'.  Ignored.\n", szTmp);
+         if (sscanf(arg+2, "%512s", szTmp) == 0) {
+            logerr("Cannot read command line database: '%s'.  Ignored.\n", szTmp);
+         }
          else
             strcpy(g_StaticParams.databaseInfo.szDatabase, szTmp);
          break;
       case 'P':   // Alternate parameters file.
-         if (sscanf(arg+2, "%512s", szTmp) == 0 )
-            fprintf(stderr, "Missing text for parameter option -P<params>.  Ignored.\n");
+         if (sscanf(arg+2, "%512s", szTmp) == 0 ) {
+            logerr("Missing text for parameter option -P<params>.  Ignored.\n");
+         }
          else
             strcpy(szParamsFile, szTmp);
          break;
       case 'N':   // Set basename of output file (for .out, SQT, and pepXML)
-         if (sscanf(arg+2, "%512s", szTmp) == 0 )
-            fprintf(stderr, "Missing text for parameter option -N<basename>.  Ignored.\n");
+         if (sscanf(arg+2, "%512s", szTmp) == 0 ) {
+            logerr("Missing text for parameter option -N<basename>.  Ignored.\n");
+         }
          else
             strcpy(g_StaticParams.inputFile.szBaseName, szTmp);
          break;
       case 'F':
-         if (sscanf(arg+2, "%512s", szTmp) == 0 )
-            fprintf(stderr, "Missing text for parameter option -F<num>.  Ignored.\n");
+         if (sscanf(arg+2, "%512s", szTmp) == 0 ) {
+            logerr("Missing text for parameter option -F<num>.  Ignored.\n");
+         }
          else
             g_StaticParams.options.iStartScan = atoi(szTmp);
          break;
       case 'L':
-         if (sscanf(arg+2, "%512s", szTmp) == 0 )
-            fprintf(stderr, "Missing text for parameter option -L<num>.  Ignored.\n");
+         if (sscanf(arg+2, "%512s", szTmp) == 0 ) {
+            logerr("Missing text for parameter option -L<num>.  Ignored.\n");
+         }
          else
              g_StaticParams.options.iEndScan = atoi(szTmp);
          break;
       case 'B':
-         if (sscanf(arg+2, "%512s", szTmp) == 0 )
-            fprintf(stderr, "Missing text for parameter option -B<num>.  Ignored.\n");
+         if (sscanf(arg+2, "%512s", szTmp) == 0 ) {
+            logerr("Missing text for parameter option -B<num>.  Ignored.\n");
+         }
          else
              g_StaticParams.options.iSpectrumBatchSize = atoi(szTmp);
          break;
@@ -643,8 +652,8 @@
 
    if ((fp=fopen(pszParamsFile, "r")) == NULL)
    {
-      fprintf(stderr, "\n Comet version %s\n %s\n", comet_version, copyright);
-      fprintf(stderr, " Error - cannot open parameter file \"%s\".\n\n", pszParamsFile);
+      logerr("\n Comet version %s\n %s\n", comet_version, copyright);
+      logerr(" Error - cannot open parameter file \"%s\".\n\n", pszParamsFile);
       exit(1);
    }
 
@@ -668,12 +677,12 @@
 
    if (!bValidParamsFile)
    {
-      printf("\n");
-      printf(" Comet version is %s\n", comet_version);
-      printf(" The comet.params file is from version %s\n", szVersion);
-      printf(" Please update your comet.params file.  You can generate\n");
-      printf(" a new parameters file using \"comet -p\"\n");
-      printf("\n");
+      log("\n");
+      log(" Comet version is %s\n", comet_version);
+      log(" The comet.params file is from version %s\n", szVersion);
+      log(" Please update your comet.params file.  You can generate\n");
+      log(" a new parameters file using \"comet -p\"\n");
+      log("\n");
       exit(1);
    }
 
@@ -698,6 +707,10 @@
          {
             sscanf(szParamVal, "%512s", g_StaticParams.databaseInfo.szDatabase);
          }
+         if (!strcmp(szParamName, "decoy-prefix"))
+         {
+            sscanf(szParamVal, "%200s", g_StaticParams.szDecoyPrefix);
+         }
          else if (!strcmp(szParamName, "nucleotide_reading_frame"))
          {
             sscanf(szParamVal, "%d", &(g_StaticParams.options.iWhichReadingFrame));
@@ -1313,12 +1326,12 @@
 
    if (!strcmp(g_StaticParams.enzymeInformation.szSearchEnzymeName, "-"))
    {
-      printf(" Error - search enzyme number %d is missing definition in params file.\n\n", iSearchEnzymeNumber);
+      log(" Error - search enzyme number %d is missing definition in params file.\n\n", iSearchEnzymeNumber);
       exit(1);
    }
    if (!strcmp(g_StaticParams.enzymeInformation.szSampleEnzymeName, "-"))
    {
-      printf(" Error - sample enzyme number %d is missing definition in params file.\n\n", iSampleEnzymeNumber);
+      log(" Error - sample enzyme number %d is missing definition in params file.\n\n", iSampleEnzymeNumber);
       exit(1);
    }
 
@@ -1442,13 +1455,13 @@
 
    if (!bCurrentParamsFile)
    {
-      fprintf(stderr, " Error - outdated params file; generate an update params file using '-p' option.\n\n");
+      logerr(" Error - outdated params file; generate an update params file using '-p' option.\n\n");
       exit(1);
    }
 
    if (g_StaticParams.tolerances.dFragmentBinStartOffset < 0.0 || g_StaticParams.tolerances.dFragmentBinStartOffset >1.0)
    {
-      fprintf(stderr, " Error - bin offset %f must between 0.0 and 1.0\n",
+      logerr(" Error - bin offset %f must between 0.0 and 1.0\n",
             g_StaticParams.tolerances.dFragmentBinStartOffset);
       exit(1);
    }
@@ -1623,10 +1636,10 @@
 
    if (iStartInputFile == argc)
    {
-      printf("\n");
-      printf(" Comet version %s\n %s\n", comet_version, copyright);
-      printf("\n");
-      printf(" Error - no input files specified so nothing to do.\n\n");
+      log("\n");
+      log(" Comet version %s\n %s\n", comet_version, copyright);
+      log("\n");
+      log(" Error - no input files specified so nothing to do.\n\n");
       exit(1);
    }
 
@@ -1674,7 +1687,7 @@
           InputFileInfo *pInputFileInfo = new InputFileInfo();
           if (!ParseCmdLine(arg, pInputFileInfo))
           {
-              fprintf(stderr, " Error - input MS/MS file \"%s\" not found.\n\n", pInputFileInfo->szFileName);
+              logerr(" Error - input MS/MS file \"%s\" not found.\n\n", pInputFileInfo->szFileName);
               g_pvInputFiles.clear();
               exit(1);
           }
@@ -1692,8 +1705,8 @@
    // time reading & processing spectra and then reporting this error.
    if ((fpcheck=fopen(g_StaticParams.databaseInfo.szDatabase, "r")) == NULL)
    {
-      fprintf(stderr, "\n Error - cannot read database file \"%s\".\n", g_StaticParams.databaseInfo.szDatabase);
-      fprintf(stderr, " Check that the file exists and is readable.\n\n");
+      logerr("\n Error - cannot read database file \"%s\".\n", g_StaticParams.databaseInfo.szDatabase);
+      logerr(" Check that the file exists and is readable.\n\n");
       g_pvInputFiles.clear();
       exit(1);
    }
@@ -1701,9 +1714,9 @@
 
    if (g_StaticParams.options.iEndScan < g_StaticParams.options.iStartScan && g_StaticParams.options.iEndScan!= 0)
    {
-      fprintf(stderr, "\n Comet version %s\n %s\n\n", comet_version, copyright);
-      fprintf(stderr, " Error - start scan is %d but end scan is %d.\n", g_StaticParams.options.iStartScan, g_StaticParams.options.iEndScan);
-      fprintf(stderr, " The end scan must be >= to the start scan.\n\n");
+      logerr("\n Comet version %s\n %s\n\n", comet_version, copyright);
+      logerr(" Error - start scan is %d but end scan is %d.\n", g_StaticParams.options.iStartScan, g_StaticParams.options.iEndScan);
+      logerr(" The end scan must be >= to the start scan.\n\n");
       g_pvInputFiles.clear();
       exit(1);
    }
@@ -1785,7 +1798,7 @@
 
          if (err != EEXIST) 
          {
-            fprintf(stderr, "\n Error - could not create directory \"%s\".\n", g_StaticParams.inputFile.szBaseName);
+            logerr("\n Error - could not create directory \"%s\".\n", g_StaticParams.inputFile.szBaseName);
             exit(1);
          }
       }
@@ -1801,7 +1814,7 @@
 
             if (err != EEXIST) 
             {
-               fprintf(stderr, "\n Error - could not create directory \"%s\".\n", szDecoyDir);
+               logerr("\n Error - could not create directory \"%s\".\n", szDecoyDir);
                exit(1);
             }
          }
@@ -1809,7 +1822,7 @@
 #else
       if ((mkdir(g_StaticParams.inputFile.szBaseName, 0775) == -1) && (errno != EEXIST))
       {
-         fprintf(stderr, "\n Error - could not create directory \"%s\".\n", g_StaticParams.inputFile.szBaseName);
+         logerr("\n Error - could not create directory \"%s\".\n", g_StaticParams.inputFile.szBaseName);
          exit(1);
       }
       if (g_StaticParams.options.iDecoySearch == 2)
@@ -1819,7 +1832,7 @@
 
          if ((mkdir(szDecoyDir , 0775) == -1) && (errno != EEXIST))
          {
-            fprintf(stderr, "\n Error - could not create directory \"%s\".\n\n", szDecoyDir);
+            logerr("\n Error - could not create directory \"%s\".\n\n", szDecoyDir);
             exit(1);
          }
       }
@@ -1835,7 +1848,7 @@
 
    if ( (fp=fopen("comet.params.new", "w"))==NULL)
    {
-      fprintf(stderr, "\n Error - cannot write file comet.params.new\n\n");
+      logerr("\n Error - cannot write file comet.params.new\n\n");
       exit(1);
    }
 
@@ -1851,6 +1864,8 @@
 num_threads = 0                        # 0=poll CPU to set num threads; else specify num threads directly (max %d)\n\
 \n", MAX_THREADS);
 
+   fprintf(fp, "decoy-prefix=DECOY_            # Prefix to attach to protein ids for decoy peptides");
+
    fprintf(fp,
 "#\n\
 # masses\n\
@@ -2010,7 +2025,7 @@
 10. Chymotrypsin           1      FWYL        P\n\
 \n");
 
-   printf("\n Created:  comet.params.new\n\n");
+   log("\n Created:  comet.params.new\n\n");
    fclose(fp);
 
 } // PrintParams
@@ -2060,7 +2075,7 @@
 
    if ((fp=fopen(szParamsFile, "r")) == NULL)
    {
-      fprintf(stderr, "\n Error - cannot open parameter file \"%s\".\n\n", szParamsFile);
+      logerr("\n Error - cannot open parameter file \"%s\".\n\n", szParamsFile);
       exit(1);
    }
 
Index: Makefile
===================================================================
--- Makefile	(revision 110)
+++ Makefile	(working copy)
@@ -1,12 +1,20 @@
 CXX = g++
 MSTOOLKIT = MSToolkit
-CXXFLAGS = -O3 -static -Wall -Wno-char-subscripts -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -I$(MSTOOLKIT)/include
+CXXFLAGS = -O3 -Wall -Wno-char-subscripts -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64 -I$(MSTOOLKIT)/include -DCRUX 
 EXECNAME = comet.exe
 OBJS = Comet.o Threading.o CometSearch.o CometPreprocess.o CometPostAnalysis.o CometMassSpecUtils.o CometWriteOut.o CometWriteSqt.o CometWritePepXML.o CometWriteTxt.o
 DEPS = Common.h OSSpecificThreading.h CometData.h CometSearch.h CometPreprocess.h ThreadPool.h CometPostAnalysis.h CometMassSpecUtils.h
 LIBS = -lm -lmstoolkitlite -lpthread
 
+all: libComet.a ./MSToolkit/mstoolkitlite.a
 
+libComet.a: $(OBJS)
+	ar rcs libComet.a $(OBJS)
+
+./MSToolkit/mstoolkitlite.a:
+	cd MSToolkit ; make
+
+
 comet.exe: $(OBJS)
 	cd MSToolkit ; make
 	${CXX} $(CXXFLAGS) $(OBJS) -L$(MSTOOLKIT) $(LIBS) -o ${EXECNAME}
Index: CometSearch.cpp
===================================================================
--- CometSearch.cpp	(revision 110)
+++ CometSearch.cpp	(working copy)
@@ -57,7 +57,7 @@
 
    if ((fptr=fopen(g_StaticParams.databaseInfo.szDatabase, "rb")) == NULL)
    {
-       fprintf(stderr, " Error - cannot read database file \"%s\".\n\n", g_StaticParams.databaseInfo.szDatabase);
+       logerr(" Error - cannot read database file \"%s\".\n\n", g_StaticParams.databaseInfo.szDatabase);
        exit(1);
    }
 
@@ -70,7 +70,7 @@
 
    if (!g_StaticParams.options.bOutputSqtStream)
    {
-      printf(" - Search progress: ");
+      log(" - Search progress: ");
       fflush(stdout);
    }
 
@@ -86,13 +86,13 @@
       // Expect a '>' for sequence header line.
       if (iTmpCh != '>')
       {
-         fprintf(stderr, "\n\n Error - database file, expecting definition line here.\n");
+         logerr("\n\n Error - database file, expecting definition line here.\n");
          fgets(szBuf, SIZE_BUF, fptr);
-         fprintf(stderr, "%c%s", iTmpCh, szBuf);
+         logerr("%c%s", iTmpCh, szBuf);
          fgets(szBuf, SIZE_BUF, fptr);
-         fprintf(stderr, "%s", szBuf);
+         logerr("%s", szBuf);
          fgets(szBuf, SIZE_BUF, fptr);
-         fprintf(stderr, "%s", szBuf);
+         logerr("%s", szBuf);
          exit(1);
       } 
 
@@ -126,9 +126,9 @@
             && !(g_StaticParams.databaseInfo.iTotalNumProteins%200))
       {
          lCurrPos = ftell(fptr);
-         printf("%3d%%", (int)(100.0 * (double)lCurrPos/(double)lEndPos));
+         log("%3d%%", (int)(100.0 * (double)lCurrPos/(double)lEndPos));
          fflush(stdout);
-         printf("\b\b\b\b");
+         log("\b\b\b\b");
       }
 
       // Now search sequence entry; add threading here so that
@@ -144,7 +144,7 @@
 
    if (!g_StaticParams.options.bOutputSqtStream)
    {
-      printf(" 100%%\n");
+      log(" 100%%\n");
    }
 }
 
@@ -215,7 +215,7 @@
          pszTemp=(char *)malloc(seqSize);
          if (pszTemp == NULL)
          {
-            fprintf(stderr, " Error - malloc(szTemp[%d])\n",seqSize);
+            logerr(" Error - malloc(szTemp[%d])\n",seqSize);
             exit(1);
          }
 
@@ -373,7 +373,7 @@
                      // Now get the set of binned fragment ions once to compare this peptide against all matching spectra.
                      if ((pbDuplFragment = (bool*)malloc(g_pvQuery.at(iWhichQuery)->_spectrumInfoInternal.iArraySize * (size_t)sizeof(bool)))==NULL)
                      {
-                        fprintf(stderr, " Error - malloc pbDuplFragments; iWhichQuery = %d\n\n", iWhichQuery);
+                        logerr(" Error - malloc pbDuplFragments; iWhichQuery = %d\n\n", iWhichQuery);
                         exit(1);
                      }
 
@@ -414,10 +414,10 @@
                      if (g_StaticParams.options.iDecoySearch)
                      {
 #ifdef _WIN32
-                        _snprintf(szDecoyProteinName, WIDTH_REFERENCE, "DECOY_%s", szProteinName);
+                        _snprintf(szDecoyProteinName, WIDTH_REFERENCE, "%s%s", g_StaticParams.szDecoyPrefix, szProteinName);
                         szDecoyProteinName[WIDTH_REFERENCE-1]=0;  // _snprintf does not guarantee null termination
 #else
-                        snprintf(szDecoyProteinName, WIDTH_REFERENCE, "DECOY_%s", szProteinName);
+                        snprintf(szDecoyProteinName, WIDTH_REFERENCE, "%s%s", g_StaticParams.szDecoyPrefix, szProteinName);
 #endif
                         // Generate reverse peptide.  Keep prev and next AA in szDecoyPeptide string.
                         // So actual reverse peptide starts at position 1 and ends at len-2 (as len-1
@@ -780,7 +780,7 @@
       }
       else
       {
-         fprintf(stderr, " Error - iIsotopeError=%d, should not be here!\n\n", g_StaticParams.tolerances.iIsotopeError);
+         logerr(" Error - iIsotopeError=%d, should not be here!\n\n", g_StaticParams.tolerances.iIsotopeError);
          exit(1);
       }
    }
@@ -811,10 +811,10 @@
             pTmp=(char *)realloc(_proteinInfo.pszProteinSeq, ii+100);
             if (pTmp == NULL)
             {
-               fprintf(stderr, " Error realloc(szProteinSeq) ... size=%d\n", ii);
-               fprintf(stderr, " A sequence entry is larger than your system can handle.\n");
-               fprintf(stderr, " Either add more memory or edit the database and divide\n");
-               fprintf(stderr, " the sequence into multiple, overlapping, smaller entries.\n\n");
+               logerr(" Error realloc(szProteinSeq) ... size=%d\n", ii);
+               logerr(" A sequence entry is larger than your system can handle.\n");
+               logerr(" Either add more memory or edit the database and divide\n");
+               logerr(" the sequence into multiple, overlapping, smaller entries.\n\n");
                exit(1);
             }
 
@@ -841,10 +841,10 @@
             pTmp=(char *)realloc(_proteinInfo.pszProteinSeq, ii+100);
             if (pTmp == NULL)
             {
-               fprintf(stderr, " Error realloc(szProteinSeq) ... size=%d\n", ii);
-               fprintf(stderr, " A sequence entry is larger than your system can handle.\n");
-               fprintf(stderr, " Either add more memory or edit the database and divide\n");
-               fprintf(stderr, " the sequence into multiple, overlapping, smaller entries.\n\n");
+               logerr(" Error realloc(szProteinSeq) ... size=%d\n", ii);
+               logerr(" A sequence entry is larger than your system can handle.\n");
+               logerr(" Either add more memory or edit the database and divide\n");
+               logerr(" the sequence into multiple, overlapping, smaller entries.\n\n");
                exit(1);
             }
 
@@ -2227,7 +2227,7 @@
             // now get the set of binned fragment ions once for all matching peptides
             if ((pbDuplFragment = (bool*)malloc(g_pvQuery.at(iWhichQuery)->_spectrumInfoInternal.iArraySize * (size_t)sizeof(bool)))==NULL)
             {
-               fprintf(stderr, " Error - malloc pbDuplFragments; iWhichQuery = %d\n\n", iWhichQuery);
+               logerr(" Error - malloc pbDuplFragments; iWhichQuery = %d\n\n", iWhichQuery);
                exit(1);
             }
 
Index: CometWriteOut.cpp
===================================================================
--- CometWriteOut.cpp	(revision 110)
+++ CometWriteOut.cpp	(working copy)
@@ -139,7 +139,7 @@
 
    if ((fpout = fopen(szOutput, "w")) == NULL)
    {
-      fprintf(stderr, "Error - cannot write to file %s.\n\n", szOutput);
+      logerr("Error - cannot write to file %s.\n\n", szOutput);
       exit(1);
    }
 
Index: CometWriteSqt.cpp
===================================================================
--- CometWriteSqt.cpp	(revision 110)
+++ CometWriteSqt.cpp	(working copy)
@@ -94,7 +94,7 @@
    // write out entire parameters file to SQT header
    if ((fp=fopen(szParamsFile, "r")) == NULL)
    {
-      fprintf(stderr, " Error - cannot open parameter file %s.\n\n", szParamsFile);
+      logerr(" Error - cannot open parameter file %s.\n\n", szParamsFile);
       exit(1);
    }
 
Index: CometPreprocess.cpp
===================================================================
--- CometPreprocess.cpp	(revision 110)
+++ CometPreprocess.cpp	(working copy)
@@ -235,21 +235,21 @@
    pdTempRawData = (double *)calloc((size_t)pScoring->_spectrumInfoInternal.iArraySize, (size_t)sizeof(double));
    if (pdTempRawData == NULL)
    {
-      fprintf(stderr, " Error - calloc(pdTempRawData[%d]).\n\n", pScoring->_spectrumInfoInternal.iArraySize);
+      logerr(" Error - calloc(pdTempRawData[%d]).\n\n", pScoring->_spectrumInfoInternal.iArraySize);
       exit(1);
    }
 
    pdTmpFastXcorrData = (double *)calloc((size_t)pScoring->_spectrumInfoInternal.iArraySize, (size_t)sizeof(double));
    if (pdTmpFastXcorrData == NULL)
    {
-      fprintf(stderr, " Error - calloc(pdTmpFastXcorrData[%d]).\n\n", pScoring->_spectrumInfoInternal.iArraySize);
+      logerr(" Error - calloc(pdTmpFastXcorrData[%d]).\n\n", pScoring->_spectrumInfoInternal.iArraySize);
       exit(1);
    }
 
    pScoring->pfFastXcorrData = (float *)calloc((size_t)pScoring->_spectrumInfoInternal.iArraySize, (size_t)sizeof(float));
    if (pScoring->pfFastXcorrData == NULL)
    {
-      fprintf(stderr, " Error - calloc(pfFastXcorrData[%d]).\n\n", pScoring->_spectrumInfoInternal.iArraySize);
+      logerr(" Error - calloc(pfFastXcorrData[%d]).\n\n", pScoring->_spectrumInfoInternal.iArraySize);
       exit(1);
    }
 
@@ -261,7 +261,7 @@
       pScoring->pfFastXcorrDataNL = (float *)calloc((size_t)pScoring->_spectrumInfoInternal.iArraySize, (size_t)sizeof(float));
       if (pScoring->pfFastXcorrDataNL == NULL)
       {
-         fprintf(stderr, " Error - calloc(pfFastXcorrDataNL[%d]).\n", pScoring->_spectrumInfoInternal.iArraySize);
+         logerr(" Error - calloc(pfFastXcorrDataNL[%d]).\n", pScoring->_spectrumInfoInternal.iArraySize);
          exit(1);
       }
    }
@@ -350,7 +350,7 @@
       pScoring->pSparseFastXcorrData = (SparseMatrix *)calloc((size_t)pScoring->iFastXcorrData, (size_t)sizeof(SparseMatrix));
       if (pScoring->pSparseFastXcorrData == NULL)
       {
-         fprintf(stderr, " Error - calloc(pScoring->pSparseFastXcorrData[%d]).\n\n", pScoring->iFastXcorrData);
+         logerr(" Error - calloc(pScoring->pSparseFastXcorrData[%d]).\n\n", pScoring->iFastXcorrData);
          exit(1);
       }
       pScoring->pSparseFastXcorrData[0].bin=0;
@@ -379,7 +379,7 @@
          pScoring->pSparseFastXcorrDataNL = (SparseMatrix *)calloc((size_t)pScoring->iFastXcorrDataNL, (size_t)sizeof(SparseMatrix));
          if (pScoring->pSparseFastXcorrDataNL == NULL)
          {
-            fprintf(stderr, " Error - calloc(pScoring->pSparseFastXcorrDataNL[%d]).\n\n", pScoring->iFastXcorrDataNL);
+            logerr(" Error - calloc(pScoring->pSparseFastXcorrDataNL[%d]).\n\n", pScoring->iFastXcorrDataNL);
             exit(1);
          }
          pScoring->pSparseFastXcorrDataNL[0].bin=0;
@@ -433,7 +433,7 @@
       pScoring->pSparseSpScoreData = (SparseMatrix *)calloc((size_t)NUM_SP_IONS, (size_t)sizeof(SparseMatrix));
       if (pScoring->pSparseSpScoreData == NULL)
       {
-         fprintf(stderr, " Error - calloc(pScoring->pSparseSpScoreData[%d]).\n\n", pScoring->iSpScoreData);
+         logerr(" Error - calloc(pScoring->pSparseSpScoreData[%d]).\n\n", pScoring->iSpScoreData);
          exit(1);
       }
       pScoring->iSpScoreData=0;
@@ -452,7 +452,7 @@
       pScoring->pfSpScoreData = (float *)calloc((size_t)pScoring->_spectrumInfoInternal.iArraySize, (size_t)sizeof(float ));
       if (pScoring->pfSpScoreData == NULL)
       {
-         fprintf(stderr, " Error - calloc(pfSpScoreData[%d])\n", pScoring->_spectrumInfoInternal.iArraySize);
+         logerr(" Error - calloc(pfSpScoreData[%d])\n", pScoring->_spectrumInfoInternal.iArraySize);
          exit(1);
       }
 
@@ -778,7 +778,7 @@
    }
    else  // Should not get here.
    {
-      printf(" Error - iIsotopeError=%d\n\n", g_StaticParams.tolerances.iIsotopeError);
+      log(" Error - iIsotopeError=%d\n\n", g_StaticParams.tolerances.iIsotopeError);
       exit(1);
    }
 }
@@ -800,7 +800,7 @@
    pPre->pdCorrelationData = (double *)calloc((size_t)pScoring->_spectrumInfoInternal.iArraySize, (size_t)sizeof(double));
    if (pPre->pdCorrelationData == NULL)
    {
-      fprintf(stderr, " Error - calloc(pdCorrelationData[%d]).\n\n", pScoring->_spectrumInfoInternal.iArraySize);
+      logerr(" Error - calloc(pdCorrelationData[%d]).\n\n", pScoring->_spectrumInfoInternal.iArraySize);
       exit(1);
    }
 
@@ -962,7 +962,7 @@
 
    if (pdSmoothedSpectrum == NULL)
    {
-      fprintf(stderr, " Error - calloc(pdSmoothedSpectrum[%d]).\n", iArraySize);
+      logerr(" Error - calloc(pdSmoothedSpectrum[%d]).\n", iArraySize);
       exit(1);
    }
 
@@ -993,7 +993,7 @@
    pdPeakExtracted = (double *)calloc((size_t)iArraySize, (size_t)sizeof(double));
    if (pdPeakExtracted == NULL)
    {
-      fprintf(stderr, " Error - calloc(pdPeakExtracted[%d]).\n", iArraySize);
+      logerr(" Error - calloc(pdPeakExtracted[%d]).\n", iArraySize);
       exit(1);
    }
 
Index: CometPostAnalysis.cpp
===================================================================
--- CometPostAnalysis.cpp	(revision 110)
+++ CometPostAnalysis.cpp	(working copy)
@@ -34,7 +34,7 @@
                                      int maxNumThreads)
 {
    if (!g_StaticParams.options.bOutputSqtStream)
-      printf(" - Perform post-search analysis\n");
+      log(" - Perform post-search analysis\n");
 
    // Create the thread pool containing g_StaticParams.options.iNumThreads,
    // each hanging around and sleeping until asked to do a post analysis.
@@ -664,7 +664,7 @@
                   }
                   else
                   {
-                     printf(" Error - XCORR DECOY: dFragMass %f, iFragMass %d, ArraySize %d, InputMass %f, scan %d, z %d\n",
+                     log(" Error - XCORR DECOY: dFragMass %f, iFragMass %d, ArraySize %d, InputMass %f, scan %d, z %d\n",
                            dFragmentIonMass, 
                            iFragmentIonMass,
                            pQuery->_spectrumInfoInternal.iArraySize, 
@@ -683,7 +683,7 @@
                   }
                   else
                   {
-                     printf(" Error - XCORR DECOY: dFragMass %f, iFragMass %d, ArraySize %d, InputMass %f, scan %d, z %d\n",
+                     log(" Error - XCORR DECOY: dFragMass %f, iFragMass %d, ArraySize %d, InputMass %f, scan %d, z %d\n",
                            dFragmentIonMass,
                            iFragmentIonMass,
                            pQuery->_spectrumInfoInternal.iArraySize,
